<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="http://blog.jakeymvc.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://blog.jakeymvc.com/" rel="alternate" type="text/html" /><updated>2017-03-14T21:06:42+00:00</updated><id>http://blog.jakeymvc.com/</id><title type="html">제이키의 MVC 이야기</title><subtitle>ASP.NET Core MVC + Angular 2</subtitle><entry><title type="html">앵귤러와 서버</title><link href="http://blog.jakeymvc.com/angular-and-server/" rel="alternate" type="text/html" title="앵귤러와 서버" /><published>2017-03-14T00:00:00+00:00</published><updated>2017-03-14T00:00:00+00:00</updated><id>http://blog.jakeymvc.com/angular-server</id><content type="html" xml:base="http://blog.jakeymvc.com/angular-and-server/">&lt;blockquote&gt;
  &lt;p&gt;이 글은 저자의 동의를 얻어 번역한 글이다. &lt;a href=&quot;http://angularfirst.com/angular-and-the-server/&quot;&gt;원문&lt;/a&gt;이 있는 블로그에는 마이크로소프트 스택에서 앵귤러를 다루는 좋은 글들이 많이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;비주얼스튜디오가 제공하는 스타터 프로젝트는 UI 렌더링, 인증, 데이터를 다루는 샘플 API 등  모든 것을 기본으로 포함한다. 이런 설정이 시작시 좋은 출발점이긴 하지만 자신의 애플리케이션을 위한 최고의 디자인이라고 하기는 어려울 것이다.&lt;/p&gt;

&lt;p&gt;앵귤러 애플리케이션을 만들 때, 서버단 애플리케이션과 어떻게 통합해야 할까? 선택 가능한 어떤 옵션이 있고 또, 그 선택이 맞는지 어떻게 알 수 있을까? 이런 주제는 앵귤러 위주의 자료들에서 종종 쉽게 지나치는 문제이다. 한편으로, 서버단을 다루는 글에서는 독자가 이미 강력한 프론트엔드 프레임워크를 사용하고 있다는 가능성을 배제하고 서버단 기능만을 강조한다.&lt;/p&gt;

&lt;p&gt;이 글은 애플리케이션의 책임 또는 역할을 따져보고, 그 것을 호스트 애플리케이션과 통합하는 관점에서 몇 가지 그룹으로 나누어 보겠다. 이 글의 목적상, 호스트 애플리케이션이라 함은 서버단 애플리케이션으로써 앵귤러 애플리케이션의 하단에 위치하여 브라우저에 내용을 전달하는 애플리케이션이다 (앵귤러 하단에는 사실 아무것도 존재하지 않을수도 있다). 앵귤러 애플리케이션은 TypeScript 또는 JavaScript 만으로 작성이 가능하며 또는, 둘다 사용할 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;레벨 0 – 서버 없는 애플리케이션&lt;/h2&gt;

&lt;p&gt;서버단에 의존하지 않고도 구현이 가능한 기능만을 포함하는 레벨이다. 이 의미는 애플리케이션이 동작할 때, 앵귤러가 기능함에 있어 어떤 로직도 서버단의 도움없이 처리한다는 것이다. 이런 구성은 정적 파일만을 호스팅하는 것이 배포 또는 운영상 유리할 때 바람직하다.&lt;/p&gt;

&lt;p&gt;런타임시 서버단의 종속성이 전혀 없다하더라도, 애플리케이션을 최적화하기 위한 빌드의 장점을 누릴 수 있다. 이런 것들은 서버단 백엔드 없이도 구성할 수 있는 기능들이다. (역주: Webpack이 좋은 예다. TypeScript 로 작성된 앵귤러 앱을 JavaScript 로 빌드하면서 동시에 bundling, minification 등 필요한 일을 할 수 있다)&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;라우팅&lt;/h4&gt;

&lt;p&gt;앵귤러 라우터는 해시(hash; #) URL 스타일로 구성될 수 있다. 이런 구성에서 각 라우터는 해시 심볼(#) 뒤의 URL로 표현된다. example.com/#/about or example.com/#/products/1 과 같은 것이 그 예다. 애플리케이션이 로딩되면서 라우터가 동작하고 사용자의 요청을 뷰로 네비게이트한다.&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;국제화; 다국어 지원&lt;/h4&gt;

&lt;p&gt;앵귤러는 다국어 지원을 위한 유팉리티를 갖고 있다. 다국어 처리를 위해 거쳐야 할 몇가지 단계가 &lt;a href=&quot;https://angular.io/docs/ts/latest/cookbook/i18n.html&quot;&gt;문서&lt;/a&gt;로 정리되어 있다. 결론적으로 말해서, 국제화에 대응하는 여러 가지 버전이 국가별 폴더에 정적 파일로 배포된다. 이 시점에서 사용자들의 로케일 버전으로 라우팅하는데 몇가지 옵션이 있다. UI에서 사용자들이 직접 언어를 선택하거나 또는, 사용자 브라우저의 언어 설정에 따라 자동으로 라우팅할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;뷰 렌더링&lt;/h4&gt;

&lt;p&gt;앵귤러 프레임워크의 첫번째 하일라이트는 렌더링이다. 자바스크립트 객체를 템플릿에 바인딩하여 데이터를 확인하고 이벤트 바인딩으로 변화를 알아내는 것은 거의 마술에 가깝다. 서버단 프레임워크가 자신만의 렌더링 엔진이 있는 것에 반해, 앵귤러는 이 작업을 브라우저에서 처리한다. 당신이 앵귤러를 사용한다면 서버의 도움 없이도 뷰를 통제할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;레벨 1 - 호스트 애플리케이션과 통합&lt;/h2&gt;

&lt;p&gt;이 레벨은 호스트 애플리케이션과 앵귤러 애플리케이션이 상호 제공하는 기능의 조합이다. 서버가 앵귤러 애플리케이션에 대해 잘 알지 못하더라도 서버와 클라이언트가 상호 존중하는 방식으로 구성해야 하고 이 둘은 상대방의 행동 방식을 염두에 두어야 한다.&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;라우팅&lt;/h4&gt;

&lt;p&gt;앞서 살펴본 해시 방식 URL과는 반대로, 조금더 일반적인 HTML 5 pushState 방식(*) URL은 서버의 지원여부에 달려 있다. 이런 URL은 example.com/about 또는 example.com/products/1 처럼 해시를 갖지 않는다. 여기서 문제는 사용자가 URL을 사용하여 당신의 애플리케이션에 최초로 접속할 때, 앵귤러 애플리케이션 입장에서는 라우트를 처리해볼 기회가 없다는 것이다. 대신, 서버가 요청을 먼저 받고 클라이언트로 앵귤러 애플리케이션을 돌려 준 다음, 라우팅 처리를 마치게 한다. &lt;a href=&quot;http://angularfirst.com/your-first-angular-2-asp-net-core-project-in-visual-studio-code-part-6/&quot;&gt;여기&lt;/a&gt;에서 관련한 예제를 살펴볼 수 있다.&lt;/p&gt;

&lt;p&gt;(*) HTML 5에서는 브라우저의 히스토리에 접근할 수 있는 API를 정의하고 있다. pushState()는 히스토리에 새 엔트리를 작성할 수 있게 도와준다.&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;인증&lt;/h4&gt;

&lt;p&gt;때로는, 인증된 사용자만 앵귤러 애플리케이션에 접근하도록 제한해야할 때가 있다. 앵귤러 애플리케이션이 Web API 를 통해 사용자를 인증할 수 있지만 호스트 애플리케이션에서 인증하도록 하는 옵션도 가능하다. 예를 들면, 사용자가 당신의 웹 애플리케이션에 최초로 접근을 시도할 때, 서버가 Unauthorized 메시지를 반환할 수 있다. 이 과정에서 어떤 앵귤러 코드도 브라우저로 반환되지 않는다.&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;뷰 렌더링&lt;/h4&gt;

&lt;p&gt;앞서 말했듯이 앵귤러 렌더링은 애플리케이션의 UI를 만들어내는 것, 그 이상의 능력을 갖고 있다. 일반적으로, 렌더링은 브라우저에서 발생한다. 그러나, 로딩 시간과 SEO 에 최적화된 애플리케이션은 서버단 렌더링의 도움을 받는다.&lt;/p&gt;

&lt;p&gt;이 부분이 바로 Augular Universal(https://universal.angular.io/)이 딱 들어맞는 곳이다. 서버 프레임워크의 뷰 엔진을 사용하는 대신, 앵귤러 유니버셜은 앵귤러 템플릿을 서버단에서 렌더한다. 브라우저는 클라이언트단 렌더링이 필요없이 즉각적으로 HTML과 CSS를 받아 화면에 출력한다.&lt;/p&gt;

&lt;p&gt;앵귤러 유니버셜을 사용하는 것은 앵귤러 애플리케이션을 작성하는데 있어 복잡도를 높이고 어떤 제약을 강제화한다. 따라서, 이렇게 추가적인 성능  향상을 위해서는 그에 따른 비용을 감수해야 한다는 것을 이해해야 한다. 더 자세한 내용은 &lt;a href=&quot;https://github.com/angular/universal&quot;&gt;GitHub&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;국제화; 다국어 지원&lt;/h4&gt;

&lt;p&gt;다국어 지원은 호스트 애플리케이션이 직접적인 역할을 하는 부분이 아닐수도 있지만, 어쩌면 통합된 라우팅, 인증 또는 원하는 사용자 경험을 제공하기 위해 역할을 해야할 수도 있다.&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;로깅&lt;/h4&gt;

&lt;p&gt;로깅은 호스트 애플리케이션과 앵귤러 애플리케이션사이에 긴밀하게 통합되어 있을 필요는 없다. 그러나, 라우팅, 인증, 렌더링 등에서 서버의 역할이 많아졌다는 것을 고려할 때, 이렇게 추가된 역할에서 발생하는 에러를 로깅해야 할 것을 고려해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;web-apis&quot;&gt;레벨 2 - Web APIs&lt;/h2&gt;

&lt;p&gt;Web API 는 서버단 종속성이다. 그렇다고, 꼭 호스팅 애플리케이션에 위치해야 할 필요는 없다. 이 종속성(Web API)을 자체 코드베이스에 유지하는 것만으로도 많은 잇점이 있다. 빌드와 배포는 변경사항이 있는 애플리케이션에서만 수행하면 된다. API 작성은 그것이 (HTTPS 처럼 일반적인 프로토콜위에서) 동작하기만 한다면 어떤 기술로 작성되었는지 상관없다. 회사 또는 팀에서 익숙한 기술을 사용할 수 있다. 만약, &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_API&quot;&gt;Web APIs&lt;/a&gt; 와 &lt;a href=&quot;https://en.wikipedia.org/wiki/Microservices&quot;&gt;Microservices&lt;/a&gt; 개념에 익숙하다면 레벨 2 그룹이 이 개념들을 포함한다.&lt;/p&gt;

&lt;h4 id=&quot;web-apis-1&quot;&gt;Web APIs&lt;/h4&gt;

&lt;p&gt;애플리케이션이 필요로 하는 Web API의 역할은 데이터 액세스, 로깅, 사용 분석등을 포함한다. 흥미 있는 점은, 이런 역할 중 어떤 것도 앵귤러 애플리케이션에 대한 지식을 필요로 하지 않는다는 것이다. 사실, API는 여러 다른 종류의 프론트엔드 애플리케이션에 서비스를 제공한다.&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;인증&lt;/h4&gt;

&lt;p&gt;이 레벨에서의 인증은 전형적으로 앵귤러 애플리케이션과 Web API 서버에서 직접 처리한다. 여러 가지 다양한 방법이 있지만 &lt;a href=&quot;https://jwt.io/&quot;&gt;JSON web tokens&lt;/a&gt; 으로 사용자 신원을 관리하는 방식이 현재의 솔루션이라고 할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;section-11&quot;&gt;국제화; 다국어 지원&lt;/h4&gt;

&lt;p&gt;이 레벨에서의 다국어 지원은 web API를 통해 서버단 기술을 사용하여 처리될 것이다. 다시 한번 강조하지만, API라는 계약을 넘어서는 추가적인 어떤 결합도 없다.&lt;/p&gt;

&lt;h4 id=&quot;section-12&quot;&gt;번들링이 필요한 경우&lt;/h4&gt;

&lt;p&gt;어떤 경우에는 애플리케이션도 작고 애플리케이션이 의존하는 API 역시 작은 경우가 있다. 이런 경우에는, 같은 애플리케이션에 모든 기능을 모아 두자고 결정할 수도 있을 것이다. 그렇게 되면, 빌드와 배포를 공유하는 셈이 되어 한결 간편해진다. 종종, 기능을 쪼개어 서버와 클라이언트로 나누는 것은 들이는 노력만큼의 충분한 보상이 없을 때도 있다.&lt;/p&gt;

&lt;h4 id=&quot;section-13&quot;&gt;결론&lt;/h4&gt;

&lt;p&gt;모든 애플리케이션은 각기 다르다. 이글을 통해 애플리케이션의 관심사가 어떻게 서버와 앵귤러 애플리케이션 사이에서 종속성을 만들어 내는지 이해하고, 이런 고려사항을 여러분의 설계에 반영할 수 있기를 바란다.&lt;/p&gt;

&lt;p&gt;독자 중에서는 서버와 통합하는 개발 툴에 대해서는 전혀 다루지 않았음을 눈치챈 독자도 있을 것이다. 이 것은 향후 포스팅의 주제가 될테니 이 블로그를 계속 주시해주기 바란다.&lt;/p&gt;

&lt;p&gt;결국, 애플리케이션을 디자인하는 오직 한가지 방법이란 없다. 다양한 옵션을 아는 것만으로도 여러분은 롱런하는 애플리케이션을 디자인할 채비를 갖춘것이다.&lt;/p&gt;

&lt;p&gt;여러분 생각은 어떤가? 서버에서 운영하는 것이 낫다고 판단되는 특별한 기능이 있는가? 아니면 클라이언트에서? 의견을 함께 나누면 좋겠다.&lt;/p&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="angualr2" /><summary type="html">앵귤러 애플리케이션을 만들 때, 서버단 애플리케이션과 어떻게 통합해야 할까? 선택 가능한 어떤 옵션이 있고 또, 그 선택이 맞는지 어떻게 알 수 있을까? 이런 주제는 앵귤러 위주의 자료들에서 종종 쉽게 지나치는 문제이다. 한편으로, 서버단을 다루는 글에서는 독자가 이미 강력한 프론트엔드 프레임워크를 사용하고 있다는 가능성을 배제하고 서버단 기능만을 강조한다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.jakeymvc.com{&quot;feature&quot;=&gt;&quot;so-simple-sample-image-2.jpg&quot;}" /></entry><entry><title type="html">Revolutionary ASP.NET Core &amp;amp; Angular 2</title><link href="http://blog.jakeymvc.com/revolutionary-aspnetcore-angualr2/" rel="alternate" type="text/html" title="Revolutionary ASP.NET Core &amp; Angular 2" /><published>2017-01-23T00:00:00+00:00</published><updated>2017-01-23T00:00:00+00:00</updated><id>http://blog.jakeymvc.com/revolutionary-aspnetcore-angular2</id><content type="html" xml:base="http://blog.jakeymvc.com/revolutionary-aspnetcore-angualr2/">&lt;p&gt;ASP.NET 과 Angular는 각자의 위치에서 웹 개발의 주류(main stream) 프레임워크로 많이 사용되어 왔다. 최근 이 두개의 프레임워크는 바닥부터 새로 작성되었다. 닷넷 프레임워크는 비대해진 크기와 그로 인한 새 버전 릴리즈 
지연이 클라우드와 모바일 환경에 적합하지 않기 때문이었고, Angular는 5년간 커뮤니티의 피드백을 기초로 그간 문제점을 해결하고 모바일 환경을 지원하기 위해 새롭게 작성되었다고 한다. 이런 변화를 보면 스마트폰이 개발 생태계에 있어 얼마나 큰 영향력을 미쳤는지 알 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;beta-rc-&quot;&gt;Beta와 RC로 프로젝트를&lt;/h2&gt;

&lt;p&gt;2016년 5월에 프로젝트를 기획하면서 과감한 결정을 했다. ASP.NET Core 가 RC 후반 버전, Angular 2가 RC도 아닌 beta 버전인 상태에서 SPA (Single Page Application) 프로젝트를 위한 프레임워크으로 결정한 것이다. 
Angular 2의 RC 2버전과 RC 5버전에서 breaking changes 가 있어 고생을 좀 했지만 Angular 2 Final버전의 모습은 그 고생에 보답이라도 하듯 성숙해 졌다고 생각한다.&lt;/p&gt;

&lt;p&gt;프로젝트의 목적은 자동차의 모델 및 스펙을 총괄하는 제품 팀이 모델/트림/스펙/가격 등을 효율적으로 관리할 수 있는 애플리케이션과 외부 업체가 이 정보에 쉽게 접근할 수 있도록 API를 제공하는 것이었다. 데이터 입력이 많아서 데스트탑 애플리케이션 같은 UI를 구현하기 위해 Angular 2와 PrimeNG 컴포넌트들을 사용했다. 백엔드는 Augular 앱을 지원하는 API 모음과 외부 공개용 API 모음으로 구분했다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;새로 작성된 프레임워크&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/aspnetcore-angular2.png&quot; alt=&quot;Aspnet Core + Angular 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SPA를 구현하기 위해 Angular 프레임워크를 별다른 고민없이 선택했다. 시장에서는 React와 Angular가 경쟁하는 양상이었고 구글이 Angular의 새로운 버전을 TypeScript로 새롭게 작성하고 있다는 사실이 선택에 힘을 실어 주었다.&lt;/p&gt;

&lt;p&gt;그동안 ASP.NET 으로 웹 개발을 해왔기 때문에 ASP.NET Core에 대한 선택은 언제 시작할까의 선택만이 있던 상황이었다. 닷넷 개발 프레임워크가 클라우드와 모바일 환경에 부응하고 시장 지배력을 높이기 위해 바뀌는 모습을 매우 긍정적으로 생각했고 프로젝트 시작전에 닷넷 코어 및 ASP.NET Core 에 대해 블로깅을 하면서 개념을 꽤 익혔기에 ASP.NET Core는 익숙한 편이었다.&lt;/p&gt;

&lt;p&gt;Angular 2와 ASP.NET Core는 그 이전 버전과의 호환성을 과감히 포기하고 새로 작성되었다는 공통점이 있다. 새로운 프레임워크가 릴리즈되면 그 주변의 툴 또는 패키지등도 바껴야 한다. Angualr 2에서는 디자인과 그리드 때문에 몇 가지를 전전하다 PrimeNG로 최종 정리했고 ASP.NET Core는 다행이도 주변 툴이 일찌감치 지원되어 큰 어려움이 없었다. 프로젝트에 사용했던 툴은 Autofac, Serilog, AutoMapper, Swagger 등이다.&lt;/p&gt;

&lt;h2 id=&quot;entity-framework-core--&quot;&gt;Entity Framework Core 의 제약&lt;/h2&gt;

&lt;p&gt;SPA의 성격상 백엔드는 웹페이지를 다루지 않기 때문에 API를 호스팅하는 가벼운 방식이라, 모듈화되고 응답 성능이 대폭 개선된 ASP.NET Core는 좋은 선택이었다고 생각한다. 다만, 타켓 프레임워크까지 닷넷 코어로 선택한 것이 Entity Framework Core 사용을 강제화한 바람에 아쉬운 점으로 남는다 (ASP.NET Core 앱을 생성할 때, 닷넷 코어 또는 Full 닷넷 프레임워크를 선택할 수 있다).&lt;/p&gt;

&lt;p&gt;운영 환경이 멀티플랫폼도 아니고 모두 윈도우 서버라서 닷넷 프레임워크를 선택해도 문제가 없었으나 단순히 가볍고 모듈화된 닷넷 코어를 써보고 싶은 순수한 마음에 닷넷 코어로 간 것이다. 발목을 잡은 것은 엔티티 프레임워크 때문인데, EF Core는 성숙단계에 이른  버전 6.x 과 달리 테이블 상속을 지원하지 않는 등 제약사항이 좀 있다. 결국 엔티티를 상속 구조로 잡지 못하고 flat하게 사용할 수 밖에 없어서 모델링은 만족스럽지 않았다.&lt;/p&gt;

&lt;h2 id=&quot;typescript&quot;&gt;TypeScript&lt;/h2&gt;

&lt;p&gt;앞서 Angular 2는 새롭게 작성되었다고 했는데 JavaScript가 아닌 TypeScript로 작성되었다. TypeScript는 C#의 아버지 Anders Hejlsberg가 마이크로소프트에서 만든 두번째 작품이다. C#에 익숙한 개발자가 프론트엔드 프레임워크를 두고 고민에 있다면 TypeScript를 메인으로 지원하는 Angular 2를 선택하는 합리적일 것이다
(Angular 2 앱을 작성하려면 JavaScript, TypeScript, Dart 중 하나를 사용한다).&lt;/p&gt;

&lt;p&gt;마이크로소프트와 구글은 TypeScript 를 매개로 협력해 왔고 Angular 2를 작성하면서 마이크로소프트의 많은 지원을 받았다고 한다. 언어적 차원의 기능 추가 및 확장일 것이다. 한편, 마이크로소프트는 TypeScript 확산에 Angular 만큼 좋은 사례를 찾을 수는 없을터였으니 서로 윈윈했다고 볼 수 있겠다.&lt;/p&gt;

&lt;h2 id=&quot;typescript-javascript&quot;&gt;TypeScript와 JavaScript&lt;/h2&gt;

&lt;p&gt;TypeScript는 JavaScript의 수퍼셋이다. 즉, JavaScript를 .ts 파일(TypeScript의 파일 확장자) 에서 사용해도 동작한다. 그러나,  TypeScript는 JavaScript에서 지원하지 않는 class 또는 interface를 사용할 수 있게 해주고, static type check 하므로 코딩시 오류를 알리고, 인텔리전스를 지원하는 등 훌륭한 툴링을 자랑한다.&lt;/p&gt;

&lt;p&gt;TypeScript의 궁극적인 목적은 JavaScript를 객체지향적 언어처럼 다룰 수 있게 해주는 것이며 컴파일한 결과물은 JavaScript라는 것을 기억하자. Transform + Compile 한다는 의미로 트랜스파일한다고 주로 표현한다.&lt;/p&gt;

&lt;p&gt;JavaScript는 ECMAScript 표준을 따른다. 이 표준이 업데이트되면서 언어적 기능이 새로 추가되었을때, 이 기능을 지원하기 위해 브라우저가 업데이트되기까지는 시간적 차이가 존재한다. 이런 간극이 존재할 때, TypeScript의 가치가 빛을 발한다. TypeScript를 사용해 새로운 언어적 기능을 사용하면서도 브라우저가 이해할 수 있는 ECMAScript 버전으로 다운레벨 트랜스파일할 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/typescript-es6-es5.png&quot; alt=&quot;TypeScript is supersest of JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anders Hejlsberg 가 TypeScript를 만든 배경과 2.0 버전에서 지원하는 기능에 대해 마이크로소프트 &lt;a href=&quot;https://channel9.msdn.com/Blogs/Seth-Juarez/Anders-Hejlsberg-on-TypeScript-2&quot;&gt;채널 9&lt;/a&gt;에서 이야기하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;angular-2-aspnet-core--&quot;&gt;Angular 2와 ASP.NET Core는 잘 어울릴까&lt;/h2&gt;

&lt;p&gt;이 둘이 잘 어울릴까하는 문제보다는 동거에 문제가 없는가 하는 걱정이 앞선다. Knockout을 만들었고 지금은 영국 마이크로소프트에서 일하고 있는 &lt;a href=&quot;http://blog.stevensanderson.com/&quot;&gt;Steve Sanderson&lt;/a&gt;이 이분야의 전문가다. 그는 ASP.NET Core 프로젝트에서 Angular 2, React, Knockout 용 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ASPNETCoreTemplatePack&quot;&gt;템플릿 팩&lt;/a&gt;을 개발하여 제공하고 있다. 이 템플릿을 사용하여 ASP.NET Core에서 Angular 2 Starter 프로젝트를 만들 수 있다는 것은 다행스러운 일이다. 
&lt;a href=&quot;https://angular.io/&quot;&gt;Angular.io&lt;/a&gt; 에서 Get Started를 진행해 보면 초간단 앱을 보기까지 그 설정과 다루는 파일이 꽤 많다는 사실을 알 수 있다. 템플릿 팩을 통해 이런 수고를 덜 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;Angular 2 와 ASP.NET Core는 웹 개발 프레임워크로써 MV* 패턴을 사용하고 내장 Dependency Injection을 지원하며 테스트 친화적이다. 이런 공통점은 (비록 프론트엔드에서 뷰를 중심으로 다루는 것과 
백엔드에서 데이터를 중심으로 다루는 것에 차이가 있긴 하지만) 비슷한 스타일의 코딩을 할 수 있게 해준다.&lt;/p&gt;

&lt;h2 id=&quot;aspnet-core--angualr-2-&quot;&gt;ASP.NET Core + Angualr 2 예제들&lt;/h2&gt;

&lt;p&gt;앞으로 이 블로그에서도 이 둘의 동거를 다루겠지만 참고할만한 리소스를 아래에 정리했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/&quot;&gt;ASP.NET Core + Angular 2 template for Visual Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.telerik.com/products/kendo-ui/single-project-full-stack-angular/&quot;&gt;Single Project Full-Stack Angular 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jonhilton.net/&quot;&gt;jonhilton.net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chsakell.com/2016/01/01/cross-platform-single-page-applications-with-asp-net-5-angular-2-typescript/&quot;&gt;Cross-platform Single Page Applications with ASP.NET Core 1.0, Angular 2 &amp;amp; TypeScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/d/cka/ASP-NET-Core-Angular-2-Valerio-Sanctis/178646568X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1485185550&amp;amp;sr=8-1&amp;amp;keywords=asp.net+core+angular+2&quot;&gt;ASP.NET Core and Angular 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="aspnet-core" /><category term="angualr2" /><summary type="html">ASP.NET 과 Angular는 각자의 위치에서 웹 개발의 주류(main stream) 프레임워크로 많이 사용되어 왔다. 최근 이 두개의 프레임워크는 바닥부터 새로 작성되었다. 닷넷 프레임워크는 비대해진 크기와 그로 인한 새 버전 릴리즈 지연이 클라우드와 모바일 환경에 적합하지 않기 때문이었고...</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.jakeymvc.com{&quot;feature&quot;=&gt;&quot;so-simple-sample-image-1.jpg&quot;}" /></entry><entry><title type="html">닷넷의 미래</title><link href="http://blog.jakeymvc.com/dotnet-tomorrow" rel="alternate" type="text/html" title="닷넷의 미래" /><published>2016-05-05T00:00:00+01:00</published><updated>2016-05-05T00:00:00+01:00</updated><id>http://blog.jakeymvc.com/dotnet-tomorrow</id><content type="html" xml:base="http://blog.jakeymvc.com/dotnet-tomorrow">&lt;p&gt;Microsoft의 최근 행보를 알고 있는 개발자라면, 닷넷 개발자에게 흥미 진진한 시대가 펼져치고 있다는 것을 체감하고 있을 것이다. 최근 빌드 행사를 통해 닷넷과 C#의 로드맵이 확실해 졌다. Microsoft는 닷넷을 어느 곳에서든지 개발하고 운영할 수 있도록 새로운 플랫폼을 개발해 왔고 기존 플랫폼을 포함하여 모든 플랫폼을 정돈하는 과정에 있다. 이런 변화가 닷넷 개발자에게 어떤 의미를 갖는가?&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;프레임워크와 라이브러리&lt;/h3&gt;

&lt;p&gt;모든 것이 확연히 좋아졌다고 느끼는 시점이 되기전에는 항상 그렇듯이 뭔가 정책적으로 명료하지 않다는 느낌을 받는다. 최근 Xamarin 추가에 대한 발표는 당연히 환영할 만한 일이지만 닷넷 생태계에서 어떤 역할을 할지 의문을 갖게 한다. 흥미 진진한 시간인 동시에 불분명한 시간이기도 하다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;현재의 닷넷&lt;/h3&gt;

&lt;p&gt;현재 닷넷의 기본 라이브러리는 아래 그림과 같이 세 가지로 요약된다. 각각의 BASE LIBRARY가 지원하는 애플리케이션 모델이 제각기 존재한다. 따라서, BCL 기반에서 동작하는 코드가 MONO 기반에서 동작한다는 보장은 없다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/post/dotnet-today.png&quot;&gt;&lt;img src=&quot;/images/post/dotnet-today.png&quot; alt=&quot;.NET Today&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 1&amp;gt; 현재의 닷넷 플랫폼들&lt;/p&gt;

&lt;p&gt;전체 닷넷 생태계에서 내 코드를 동작시킨다는 것은은 세 개의 BASE LIBRARY - BCL(.NET Framework), .NET Core, Mono Class Library(Xamarin) - 에서 모두 동작해야 한다는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;닷넷 내에서 크로스 플랫폼 코드를 작성하고 싶다면 PCL(Portable Class Library) 을 참조하는 것이 현재의 방법이다. PCL은 동일 기능을 제공함에도 불구하고 각자의 구현체를 갖고 있는 다른 BASE LIBRARY 들의 기능을 참조함으로써 공통의 인터페이스를 제공한다. 때문에 PCL 기반위에서 구현한 코드는 닷넷의 다른 플랫폼에서도 동작할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/post/dotnet-today-pcl.png&quot;&gt;&lt;img src=&quot;/images/post/dotnet-today-pcl.png&quot; alt=&quot;PCL&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 2&amp;gt; PCL의 참조 구현&lt;/p&gt;

&lt;p&gt;PCL 이 제공하는 기능은 닷넷 생태계의 교집합적인 기능이므로 Full .NET 프레임워크에 비해서는 제한적일 수 밖에 없는 단점이 존재한다. 또한, PCL이 각각 다른 플랫폼에서 어떻게 동작하는지가 명료하지 않아서 참조한 기능이 의도하지 않게 플랫폼에 따라 다르게 동작할 수 있는 위험도 있다.&lt;/p&gt;

&lt;p&gt;이런 사항을 염두에 두어야 한다는 것은 개발자에게는 부담이 될 수밖에 없고 결국에는 3 + 1 개의 플랫폼을 전부 알아야 한다. 플랫폼 입장에서도 불만이 있다. PCL에 추가된 새 기능을 지원해야 할 때, 각 플랫폼마다 사정도 다르고 복잡도도 다를테니 구현 기간에 차이가 생길 수 밖에 없고 이는 부담으로 이어진다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;닷넷의 미래&lt;/h3&gt;

&lt;p&gt;다행이도 Microsoft는 이 문제를 인식하고 명확한 비전을 수립했다. PCL 방식을 버리고 플랫폼간에 공통 API를 지원하는 계약(CONTRACT) 방식으로 전환한다는 전략이다. 교집합 성격의 PCL이 합집합 성격의 계약으로 바뀌고 이 계약을 지키는 플랫폼과 그렇지 못한 플랫폼을 개발자에게 알려 준다.&lt;/p&gt;

&lt;p&gt;이 새로운 계약기반 API를 .NET Standard Library라고 한다. NET Standard Library 는 구현 차원에서 두 가지 성격이 공존하는데 크로스 플랫폼적인 Full Implementation과 플랫폼 종속적인 Reference Implementation(기존의 PCL 방식)의 조합이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/post/dotnet-future.png&quot;&gt;&lt;img src=&quot;/images/post/dotnet-future.png&quot; alt=&quot;.NET Future&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 3&amp;gt; 닷넷의 혁신적인 미래상&lt;/p&gt;

&lt;p&gt;용어에 조금 차이가 있기는 하지만 아래 표의 .NET Platform Standard는 .NET Standard Library 를 의미하는 것 같다. 라이브러리가 제공하는 범위가 지속적으로 변경될 것이므로 버전으로 그 차이를 구분하고 있다.&lt;/p&gt;

&lt;p&gt;아래 표를 보자면, Windows Phone 8.1은 .NET Platform Standard 1.2 이후에 추가된 API는 지원하지 않는다는 것을 알 수 있다. 또한, .NET Core 1.0과 .NET Framework 4.6.2 는 플랫폼 표준을 최초로 지원하기 시작했으며 그 플랫폼 표준의 버전은 1.5이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/post/dotnet-platform-standard.png&quot;&gt;&lt;img src=&quot;/images/post/dotnet-platform-standard.png&quot; alt=&quot;.NET Platform Standard&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;표 1&amp;gt; &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md&quot;&gt;닷넷 플랫폼 표준&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.NET Standard Library 의 API는 지속적으로 증가할 텐데 이 것을 지속적으로 구현하여 따라 잡는 플랫폼과 그렇지 않은 플랫폼이 구분된다. 특정 시점에서 보면 구현에 있어 뒤쳐지는 플랫폼이 있겠지만 shipping 기간의 차이가 있을 뿐, 최종적으로는 구현이 되어야 닷넷 표준 라이브러리라는 의미가 빛을 발할 것이다.&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;정리&lt;/h4&gt;

&lt;p&gt;&amp;lt;그림 3&amp;gt;에서 볼 수 있듯이 .NET Standard Library는 App Model, Base Library 그리고 Tooling을 decouple하고 있다. Decoupled 된 시나리오는 코드 재사용성을 훨씬 높혀주고 다른 플랫폼 때문에 익혀야할 학습 곡선을 훨씬 낮추어 준다. 결국, 닷넷 개발자는 어떤 것이든(모바일 장치에서 동작하는 앱이던, 데스크탑 앱이던, 웹 앱이던) 자신의 프로그래밍 경험을 일관되게 유지하면서 다른 종류의 앱을 개발할 수 있게 될 것이다.&lt;/p&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="cross-platform" /><summary type="html">Microsoft는 닷넷을 어느 곳에서든지 개발하고 운영할 수 있도록 새로운 플랫폼을 개발해 왔고 기존 플랫폼을 포함하여 모든 플랫폼을 정돈하는 과정에 있다. 이런 변화가 닷넷 개발자에게 어떤 의미를 갖는가?</summary></entry><entry><title type="html">MVC 확장 - 테마 지원을 위한 Custom View Engine</title><link href="http://blog.jakeymvc.com/mvc-extension-theme" rel="alternate" type="text/html" title="MVC 확장 - 테마 지원을 위한 Custom View Engine" /><published>2016-03-21T00:00:00+00:00</published><updated>2016-03-21T00:00:00+00:00</updated><id>http://blog.jakeymvc.com/mvc-extension-4</id><content type="html" xml:base="http://blog.jakeymvc.com/mvc-extension-theme">&lt;p&gt;커머셜 웹 사이트에서는 매출 증대, 고객 전환률등을 높이기 위해 다양한 시도를 한다. 중요 버튼의 색상과 크기를 변경하는 것, 입력 요소들을 세로 배열에서 가로 배열로 변환하는 등 다양한 시도를 하는데 이를 Conversion Optimization 이라고 한다. 이런 개선의 노력이 항상 좋은 결과로 이어지는 것은 아니므로 이전 버전으로 쉽게 돌아갈 수 있어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;theme-&quot;&gt;테마(Theme) 지원&lt;/h3&gt;

&lt;p&gt;간단한 CSS 변경으로도 여러 가지 변화를 관리할 수 있겠지만 화면 구성요소의 위치를 변경하는 것과 같은 큰 변경은 뷰를 직접 수정해야 할 것이다. 만약, 뷰를 직접 수정하는 변경이라면 원래 상태로 되돌리기 위해서 다시 수정해야 하므로 관리의 문제뿐만 아니라 비효율적이고 위험하다. 뷰의 복사본을 작성하여 관리하거나 소스 관리 도구를 통해 운영의 묘를 살릴수도 있겠으나 그 보다 더 좋은 방법은 테마를 지원하는 것이다.&lt;/p&gt;

&lt;p&gt;테마를 지원하기로 결정했다면 아래 요건을 만족해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;테마를 변경하는 것이 쉬워야 한다&lt;/li&gt;
  &lt;li&gt;단순한 css 변경이 아니라 뷰가 관리의 대상이다&lt;/li&gt;
  &lt;li&gt;테마에서 뷰를 찾을 수 없다면 기본 테마의 뷰를 사용할 수 있어야 한다 (Fallback system)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;custom-view-engine&quot;&gt;Custom View Engine&lt;/h3&gt;

&lt;p&gt;MVC에서 사용할 뷰 엔진을 새로 작성하는 것은 가능한 일이다. 그러나 이미 있는 바퀴를 다시 발명하려고 노력할 필요가 없듯이 기존의 Razor 뷰 엔진을 사용하면서 테마를 사용하도록 확장해 보자. 확장을 위해서는 프레임워크가 뷰를 찾는 메커니즘을 이해하고 그 중간에 간섭하여 테마에 포함된 뷰가 사용되도록 하는 것이다.&lt;/p&gt;

&lt;p&gt;아래 그림과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;RazorViewEngine&lt;/code&gt;은 다른 뷰 엔진에 기반하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/RazorViewEngineClass.png&quot; alt=&quot;Razor View Engine Class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 1&amp;gt; Razor View Engine 클래스의 상속관계&lt;/p&gt;

&lt;p&gt;뷰를 찾는 위치가 &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualPathProviderViewEngine&lt;/code&gt; 클래스에 속성으로 정의되어 있으므로 해당 속성을 customize함으로써 테마와 연관된 뷰의 위치를 삽입하는 것이 custom view engine을 작성하는 핵심이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/post/razor-search-location.png&quot;&gt;&lt;img src=&quot;/images/post/razor-search-location.png&quot; alt=&quot;Razor Search Location&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;표 1&amp;gt; Razor View 엔진의 뷰 경로 탐색&lt;/p&gt;

&lt;p&gt;Views 폴더 아래에 Themes 라고 모든 테마를 모아 둘 폴더를 새로 만들고 각 테마의 이름으로 폴더를 작성하여 뷰를 위치시킨다. Views 폴더 하단에 보이던 구조 (컨트롤러 명 폴더와 Shared 폴더) 가 그대로 테마 이름 폴더 하단에 위치해야 한다. 이 개념을 코드로 구현한 것이 목록 1이다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThemeViewEngine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RazorViewEngine&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThemeViewEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ViewLocationFormats&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;~/Views/Themes/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{1}/{0}.cshtml&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;~/Views/Themes/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Shared/{0}.cshtml&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;PartialViewLocationFormats&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;~/Views/Themes/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{1}/{0}.cshtml&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;~/Views/Themes/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Shared/{0}.cshtml&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;AreaViewLocationFormats&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;~Areas/{2}/Views/Themes/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{1}/{0}.cshtml&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;~Areas/{2}/Views/Themes/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Shared/{0}.cshtml&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;AreaPartialViewLocationFormats&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;~Areas/{2}/Views/Themes/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{1}/{0}.cshtml&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;~Areas/{2}/Views/Themes/&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeThemeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Shared/{0}.cshtml&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 1&amp;gt; ThemeViewEngine&lt;/p&gt;

&lt;p&gt;목록 1은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewLocationFormats&lt;/code&gt;을 포함한 네 개의 속성을 테마를 고려하여 재정의하고 있다. 이렇게 작성한 custom view engine은 global.asax 파일의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Application_Start&lt;/code&gt; 이벤트에서 MVC 프레임워크에 등록해 주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Application_Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigurationManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ActiveTheme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeTheme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ActiveTheme&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViewEngines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThemeViewEngine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 2&amp;gt; global.asax&lt;/p&gt;

&lt;p&gt;web.config 파일에서 ActiveTheme 라는 키로 테마를 지정하면 그 테마가 custom view engine에 전달된다. 여기서 주의할 점은, MVC 프레임워크는 다수의 뷰 엔진을 사용할 수 있기 때문에 custom view engine을 Insert 메서드로 첫 번째 엔진으로 설정해야 한다. 여러 개의 뷰 엔진을 사용할 수 있는 능력 덕분에 default fallback 뷰 시스템을 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/theme-view-engine-search-1.png&quot; alt=&quot;theme view engine search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 2&amp;gt; Theme view engine 뷰 검색 성공&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/theme-view-engine-search-2.png&quot; alt=&quot;razor view engine search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 3&amp;gt; Razor view engine 뷰 검색 성공 - fallback system&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;정리&lt;/h4&gt;

&lt;p&gt;간단히 &lt;code class=&quot;highlighter-rouge&quot;&gt;RazorViewEngine&lt;/code&gt; 클래스를 상속하는 것으로 custome view engine을 준비하고 뷰를 검색하는 경로를 customize하여 새로운 뷰 엔진을 작성해 봤다. 이런 방식으로 MVC에서 테마를 지원할 수 있다. 또한, 테마에 포함되어 있지 않은 뷰에 대한 요청은 다른 뷰 엔진에 의해 MVC 프레임워크 기본 방식으로 처리되므로 테마 때문에 모든 컨트롤러를 위한 뷰를 담지 않아도 된다.&lt;/p&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="mvc-extension" /><summary type="html">중요 버튼의 색상과 크기를 변경하는 것, 입력 요소들을 세로 배열에서 가로 배열로 변환하는 등 다양한 시도를 하는데 이를 Conversion Optimization 이라고 한다.</summary></entry><entry><title type="html">MVC 확장 - HTML 헬퍼</title><link href="http://blog.jakeymvc.com/mvc-extension-html-helper" rel="alternate" type="text/html" title="MVC 확장 - HTML 헬퍼" /><published>2016-01-15T00:00:00+00:00</published><updated>2016-01-15T00:00:00+00:00</updated><id>http://blog.jakeymvc.com/mvc-extension-3</id><content type="html" xml:base="http://blog.jakeymvc.com/mvc-extension-html-helper">&lt;p&gt;Custom 객체를 만들거나 헬퍼 메서드를 작성하는 데에는 크게 두 가지 이점이 있다. 첫 째로, 반복되는 내용을 캡슐화하여 코드를 간결하게 유지할 수 있고 두 번째로, 캡슐화된 기능은 쉽게 재사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;html-&quot;&gt;기본 HTML 헬퍼&lt;/h3&gt;

&lt;p&gt;MVC 프레임워크는 Razor 뷰에서 사용하는 유용한 Html 헬퍼들을 제공한다. 이런 헬퍼들을 사용하면 컨트롤러와 액션 메서드의 이름을 사용하여 애플리케이션 내에서 라우팅 시스템에 근간한 안전한 네비게이션할 수 있고, 뷰와 바인딩된 모델 덕에 인텔리센스의 도움으로 모델의 속성을 strong typed 형태로 폼 항목에 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/html-helpers.png&quot; alt=&quot;HTML 헬퍼&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;표 1&amp;gt; Html 헬퍼 예시와 그 혜택&lt;/p&gt;

&lt;p&gt;그러나, 기본으로 제공되는 HTML 헬퍼가 많지 않다. 대신 두 가지 방법으로 사용자 HTML 헬퍼를 쉽게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;뷰에 직접 정의하는 Inline Razor 헬퍼는 생성과 사용이 직관적이고 쉽지만 다른 뷰에서 사용할 수 없다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/inline-helper.png&quot; alt=&quot;Inline Razor 헬퍼&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 1&amp;gt; Inline Razor 헬퍼&lt;/p&gt;

&lt;p&gt;특정 뷰에서만 사용하는 것이 아니라면 재사용성 때문에 확장 메서드 기법을 이용해 아래와 같이 사용자 HTML 헬퍼를 만드는 방법이 더 보편적이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/extension-method.png&quot; alt=&quot;확장 메서드 방식의 HTML 헬퍼&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 2&amp;gt; 확장 메서드 방식의 HTML 헬퍼&lt;/p&gt;

&lt;p&gt;이렇게 정의된 HTML 헬퍼는 어떤 뷰에서든지 아래와 같은 Razor 문장으로 쉽게 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DisplayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;부분 뷰 / 자식 액션&lt;/h3&gt;

&lt;p&gt;HTML 렌더링을 모듈화하고 재사용성을 높인다는 관점에서 보면 HTML 헬퍼 말고도 부분 뷰 / 자식 액션이 있다. 어떻게 다르고 언제 사용해야 하는지 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/partial-view-child-action.png&quot; alt=&quot;부분 뷰, 자식액션과 헬퍼 메서드 비교&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;표 2&amp;gt; 부분 뷰, 자식액션과 헬퍼 메서드 비교&lt;/p&gt;

&lt;p&gt;하나의 HTML 요소를 사용한다면 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 처럼 서로 연관된 HTML 요소에 대한 작업이라면 헬퍼 메서드를 사용하자. 다소 복잡한 영역을 대상으로 하거나 컨트롤러의 액션이 사용된다면 부분 뷰 / 자식 액션을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;뷰에 비지니스 로직을 두지 않아야 한다는 MVC 패턴의 취지에 맞게 헬퍼 메서드는 HTML 렌더링만 취급해야 할 것이다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;태그 헬퍼&lt;/h3&gt;

&lt;p&gt;MVC 6에서는 태그 헬퍼가 새로 도입되었다. MVC 6에서 HTML 헬퍼를 대치하는 개념이지만 HTML 헬퍼는 별도 설정 없이 사용할 수 있는 반면, 태그 헬퍼는 지시어을 통해 그 사용을 명시해야 하는 추가적인 기능이다.&lt;/p&gt;

&lt;p&gt;태그 헬퍼에 대한 개념적인 내용은 이전 글, &lt;a href=&quot;/taghelpers/&quot;&gt;태그 헬퍼 (TagHerpers)&lt;/a&gt; 에서 알아보자.&lt;/p&gt;

&lt;p&gt;HTML 헬퍼에 비해 태그헬퍼는 어떤 장점을 갖고 있을까. 아래 두 개의 소스를 비교해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/html-helper-source.png&quot; alt=&quot;HTML 헬퍼를 사용하는 뷰&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 3&amp;gt; HTML 헬퍼를 사용하는 뷰&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/tag-helper-source.png&quot; alt=&quot;태그 헬퍼를 사용하는 뷰&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 4&amp;gt; 태그 헬퍼를 사용하는 뷰&lt;/p&gt;

&lt;p&gt;회색으로 하일라이트된 부분이 폼의 입력 항목이다. 모델의 속성을 사용하는 법이 HTML 스러워지고 HTML 소스를 보기가 훨씬 편해졌다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.asp.net/projects/mvc/en/latest/views/tag-helpers/intro.html#what-are-tag-helpers&quot;&gt;Introduction to Tag Helpers&lt;/a&gt; 글에 따르면 태그 헬퍼는 HTML 프렌들리하고 풍부한 인텔리센스 지원을 받기에 개발자의 생산성을 높일 수 있다고 한다.&lt;/p&gt;

&lt;p&gt;게다가 친절하게도 &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfirmPassword&lt;/code&gt; 이라는 모델 속성이 label 요소에 사용될 때, 렌더링된 결과에 단어 사이에 자동으로 공백을 삽입해 준다. 대문자로 시작되는 곳에 공백을 삽입해 주는 작은 기능이지만, 이런 작은 배려에 개발자들은 감동 받는다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Taghelper
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ConfirmPassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 렌더링된 HTML
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ConfirmPassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Confirm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;정리&lt;/h4&gt;

&lt;p&gt;코드를 간결하게 유지하고 재사용성을 높일 수 있는 차원에서 HTML 헬퍼를 알아봤다. 웹 페이지를 모듈화 하기위한 방법으로 부분 뷰와 HTML 헬퍼를 병행해서 사용한다면 좋은 효과를 볼 것이다.&lt;/p&gt;

&lt;p&gt;MVC6 에서 소개된 태그 헬퍼와 뷰 컴포넌트는 이전과는 전혀 다른 스타일을 보여주고 있다.&lt;/p&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="mvc-extension" /><summary type="html">Custom 객체를 만들거나 헬퍼 메서드를 작성하는 데에는 크게 두 가지 이점이 있다. 첫 째로, 반복되는 내용을 캡슐화하여 코드를 간결하게 유지할 수 있고 두 번째로, 캡슐화된 기능은 쉽게 재사용할 수 있다.</summary></entry><entry><title type="html">MVC 확장 - Action Filter</title><link href="http://blog.jakeymvc.com/mvc-extension-action-filter" rel="alternate" type="text/html" title="MVC 확장 - Action Filter" /><published>2015-12-09T00:00:00+00:00</published><updated>2015-12-09T00:00:00+00:00</updated><id>http://blog.jakeymvc.com/mvc-extension-2</id><content type="html" xml:base="http://blog.jakeymvc.com/mvc-extension-action-filter">&lt;p&gt;MVC 애플리케이션을 작성하면서 가장 빈번하게 들여다 보는 곳이 컨트롤러가 아닐까 싶다. 그 이름에서 알 수 있듯이 흐름을 제어하기 때문이다. 컨트롤러의 핵심 요소인 액션과 액션 결과(Action Result)에는 필터 어트리뷰트를 적용할 수 있는데 이를 액션 필터, 결과 필터라고 한다. 이 필터들을 MVC 요청 파이프라인의 흐름에 간섭할 수 있는 확장 포인트로 삼을 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;mvc---&quot;&gt;MVC 요청 라이프 사이클&lt;/h3&gt;

&lt;p&gt;아래 그림은 MVC 요청이 액션에 전달되고 액션 결과를 생성하기까지의 라이프 사이클을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/mvc-action-result-filters.png&quot; alt=&quot;MVC Request Life Cycle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 1&amp;gt; MVC 요청 라이프 사이클&lt;/p&gt;

&lt;p&gt;이전 글 &lt;a href=&quot;/mvc-extension-action-result/&quot;&gt;Action Result&lt;/a&gt;에서 알아 봤듯이 액션 메서드는 명령(액션 결과의 종류)을 결정하고 이 명령은 해당 객체(액션 결과)에 의해 실행된다. 분리되어 있는 구조 덕에 확장 또는 간섭의 포인트를 더 많이 갖게 되었다.&lt;/p&gt;

&lt;p&gt;액션 필터와 결과 필터를 모두 사용한다면 그림 1과 같이 네 곳에서 요청과 응답에 관련된 작업을 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;필터 구현에 필요한 인터페이스&lt;/h3&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionFilter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 1&amp;gt; 액션 필터를 구현하기 위한 인터페이스&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IResultFilter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnResultExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResultExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnResultExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResultExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 2&amp;gt; 결과 필터를 구현하기 위한 인터페이스&lt;/p&gt;

&lt;p&gt;목록 1과 2는 각각 액션 필터와 결과 필터를 구현할 때, 구현해야 하는 인터페이스이다. 참고로, 두 가지 필터 모두 필요하다면 목록 3에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionFilterAttribute&lt;/code&gt;를 대신 사용할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = false)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActionFilterAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IResultFilter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The OnXxx() methods are virtual rather than abstract so that a developer need override
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// only the ones that interest him.
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnResultExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResultExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnResultExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResultExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 3&amp;gt; 액션 필터 어트리뷰트&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;워크플로우&lt;/h3&gt;

&lt;p&gt;쇼핑몰에서 주문을 확인하고 배송지 입력, 결재 정보 입력, 최종 확인 후 주문을 내는 것과 같이 일련의 작업을 순서대로 진행하는 것을 워크플로우라고 한다. 정의된 작업 순서라고 볼 수 있겠다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 액션 필터만 사용해서 이런 워크플로우를 구현해 보려고 한다. 강제화된 작업 순서는 사용자 입력뿐만 아니라 프로세스 과정에도 많이 찾아볼 수 있다.&lt;/p&gt;

&lt;p&gt;이런 작업을 구현하려면 각 작업마다 정의된 상태가 부여되어야 하고 사용자 흐름에 맞게 작업 상태를 지속적으로 업데이트해야 한다. Step 1, 2, 3, 4를 순서대로 진행한다고 할 때, 상태를 확인하고 업데이트하는 비슷한 코드가 각 단계마다 중복될 것이 충분히 예상된다. 이런 코드를 액션 필터로 추상화해보자.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;로직 설계&lt;/h3&gt;

&lt;p&gt;각 스텝은 하나의 액션 메서드에서 수행하는 작업이라고 가정하고, 액션 메서드를 수행하기 전과 후에 어떤 일이 필요한지 생각해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/action-filter-workflow.png&quot; alt=&quot;워크플로우&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 2&amp;gt; 요청 처리 워크플로우&lt;/p&gt;

&lt;p&gt;사용자가 최초 스텝을 수행했다면 추적을 위한 세션 값을 할당할 것이다. 이 값은 사용자 정보의 일부로 데이터베이스에도 저장될 것이다. 따라서 사용자 세션 값이 있다는 의미는 최소한 Step 1을 거쳤다는 의미이고 이 세션 값을 찾을 수 없다면 사용자를 처음 스텝으로 리다이렉트한다.&lt;/p&gt;

&lt;p&gt;각 액션 메서드는 실행에 앞서 최소한 완료해야 할 스텝을 완료했는지 확인해야 한다. 만약, Step 4에서 최소 완료 스텝을 2로 설정하면 Step 3는 건너뛸 수 있다는 것을 의미한다. 최소 완료 스텝을 사용함으로써 좀더 유연한 분기 로직을 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;이렇게 이전 상태를 확인하고 조건에 충족하지 않으면 리다이렉트하는 로직은 액션 필터의 OnActionExecuting 메서드에서 구현한다.&lt;/p&gt;

&lt;p&gt;액션 메서드를 수행한 후에는 사용자 정보에 완료한 스텝을 업데이트해야 할 것이다. 액션 메서드 실행 후의 작업이므로 OnActionExecuted 메서드에서 구현할 것이다.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;액션 필터 구현&lt;/h3&gt;

&lt;p&gt;액션 필터에서 사용할 세 가지 상태 값은 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;현재 단계&lt;/li&gt;
  &lt;li&gt;최소 (완료 요구된) 단계&lt;/li&gt;
  &lt;li&gt;사용자가 완료한 마지막 단계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재 스텝과 최소 완료 스텝은 필터를 액션 메서드에 적용할 때 액션 메서드에 맞게 설정할 수 있지만 사용자가 마지막으로 완료한 단계는 데이터베이스에서 관리된다. 이 세 가지 상태를 사용하면 액션 메서드의 호출 순서 즉, 사용자 입장에서 다시 표현할 때, 이동하는 페이지의 순서를 강제화할 수 있다. 목록 4은 액션 필터의 기본 골격을 보여주고 있다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WorkflowFilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionFilter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_highestCompletedStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MinRequiredStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 4&amp;gt; 워크플로우 액션 필터의 기본 구조&lt;/p&gt;

&lt;p&gt;목록 4을 보면 액션 필터를 작성하기 위해 필요한 &lt;code class=&quot;highlighter-rouge&quot;&gt;FilterAttribute&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;IActionFilter&lt;/code&gt;를 상속하고 있다. 클래스 멤버로 세 가지 상태 값을 두고 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;IActionFilter&lt;/code&gt; 인터페이스에 따른 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnActionExecuting&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OnActionExcuted&lt;/code&gt;, 두 개의 메서드를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;컨트롤러의 액션 메서드에 액션 필터를 적용하는 방식은 목록 5와 같다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WorkflowFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MinRequiredStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CurrentStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Step1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stepData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Step1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tracker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tracker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stepData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step1s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stepData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[HttpPost]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WorkflowFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MinRequiredStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CurrentStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Step1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//... Step1 에 관련된 데이터 저장
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WorkflowFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MinRequiredStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CurrentStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Step2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//... 생략
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 5&amp;gt; 액션 메서드에 액션 필터 적용&lt;/p&gt;

&lt;p&gt;WokflowValues는 Begin = 0 부터 Step1 = 1, … ,Step4 = 4 까지 enum으로 정의되어 있다. 각 스텝마다 최소 완료 스텝과 현재 스텝을 액션 필터로 수식하고 있다. 목록 5에서는 다른 스텝들이 하나의 컨트롤러에 있기 때문에 액션 메서드마다 필터를 적용하고 있지만 Step1 만 처리하는 컨트롤러를 사용한다면 컨트롤러 수준에서 필터를 적용할 수 있다. 또한, 필요하다면 글로벌로 적용하는 것도 가능하다.&lt;/p&gt;

&lt;p&gt;이제 액션 필터의 구현부를 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicantId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tracker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicantId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicantId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DependencyResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppDbContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_highestCompletedStep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowStage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MinRequiredStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_highestCompletedStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_highestCompletedStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateRedirectUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PreProcess&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateRedirectUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PreProcess&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateRedirectUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PreProcess&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateRedirectUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PreProcess&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedirectToRouteResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateRedirectUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedirectToRouteResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RouteValueDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 6&amp;gt; 액션 메서드가 실행되기 전, 요청을 처리하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnActionExecuting&lt;/code&gt; 메서드&lt;/p&gt;

&lt;p&gt;로직으로 잡은 내용이 목록 6의 메서드에 구현되어 있다. 먼저, 추적을 위한 세션 값이 존재하는지 확인하고 없다면 어떤 스텝도 완료하지 않았으므로 처음 스텝으로 보낸다. 그러나, 현재 단계가 처음 스텝일 수도 있기 때문에 그렇지 않은 경우에만 리다이렉트한다.&lt;/p&gt;

&lt;p&gt;그 다음엔 데이터베이스에서 사용자가 완료한 마지막 스텝을 조회하여 최소로 요구되는 스텝과 비교한다. 최소 요구 스텝보다 완료한 스텝이 적다면 액션 메서드로 가는 조건에 부합하지 않기 때문에 최근 완료한 스텝으로 리다이렉트한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;filterContext.Result&lt;/code&gt; 는 액션 결과 형식이고 이 속성에 &lt;code class=&quot;highlighter-rouge&quot;&gt;RedirectToRouteResult&lt;/code&gt; 인스턴스를 할당하여 다른 액션으로 이동할 수 있다.&lt;/p&gt;

&lt;p&gt;이 로직을 무사히 통과하면 액션 메서드가 실행되고 이어서 액션 필터의 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnActionExecuted&lt;/code&gt; 메서드가 호출된다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DependencyResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppDbContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tracker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt; 
                &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_highestCompletedStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkflowStage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentStage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SaveChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 7&amp;gt; 액션 메서드가 실행된 후, 사후 처리하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnActionExecuted&lt;/code&gt; 메서드&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OnActionExecuted&lt;/code&gt; 메서드의 목적은 사용자가 완료한 스텝을 데이터베이스에 반영하는 것이다. 따라서, 값을 저장할 때 사용하는 POST 액션 메서드가 호출되었는지, 현재 스텝이 이미 완료한 스텝보다 같거나 큰지를 확인하고 사용자가 완료한 워크플로우 단계를 업데이트한다. 이렇게 수정된 값은 다음 스텝을 호출할 때, 최고 요구 스텝을 충족하는지 알아보기 위해 사용된다.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;다른 방법&lt;/h3&gt;

&lt;p&gt;한편으로, MVC 컨트롤러는 이미 &lt;code class=&quot;highlighter-rouge&quot;&gt;IActionFilter&lt;/code&gt; 인터페이스를 상속하고 있어 액션 호출전과 호출 후에 할 작업을 정의할 수 있다.액션 필터를 구현하지 않고도 컨트롤러 자체에서 처리가 가능한 것이다. 그러나, 구현 내용을 다른 컨트롤러에 재사용할 수 없고, 호출된 액션 메서드에 따라 다른 처리를 하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;filterContext&lt;/code&gt; 가 제공하는 라우트 데이터를 참고해야 한다. 컨트롤러에 공통으로 적용할 일이라면 이 방법을 사용하는 것도 고려해 볼 일이다.&lt;/p&gt;

&lt;p&gt;참고로, &lt;code class=&quot;highlighter-rouge&quot;&gt;filterContext&lt;/code&gt;는 라우트 데이터 이외에도 ControllerContext, ActionResult, ActionDescriptor, Request 객체에 대한 접근을 제공한다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAuthenticationFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAuthorizationFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IExceptionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IResultFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncManagerContainer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 8&amp;gt; MVC Contoller&lt;/p&gt;

&lt;p&gt;목록 8에서 확인할 수 있듯이 IActionFilter 인터페이스를 구현하고 있는 실제 내용은 없다. 두 개의 메서드를 virtual로 정의하여 자식 클래스에서 오버라이드할 수 있도록 하고 있다.&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;정리&lt;/h4&gt;

&lt;p&gt;사용자가 완료한 단계를 데이터베이스에 업데이트 하면서 액션 필터를 통해 현재 스텝과 최소 요구 스텝을 정의하여 워크플로우를 구현해봤다.&lt;/p&gt;

&lt;p&gt;액션 필터는 이렇게 MVC 파이프라인에 사용자 로직을 주입할 때 사용할 수 있다. 결과 필터는 다루지 않았지만 이렇게 여러 필터를 통해 사용자 로직을 구현하고 흐름을 제어할 수 있다는 것이 매력적이다.&lt;/p&gt;</content><author><name>Jake Ryu</name></author><category term="mvc-extension" /><summary type="html">컨트롤러의 핵심 요소인 액션과 액션 결과(Action Result)에는 필터 어트리뷰트를 적용할 수 있는데 이를 액션 필터, 결과 필터라고 한다. 이 필터들을 MVC 요청 파이프라인의 흐름에 간섭할 수 있는 확장 포인트로 삼을 수 있다.</summary></entry><entry><title type="html">MVC 확장 - Action Result</title><link href="http://blog.jakeymvc.com/mvc-extension-action-result" rel="alternate" type="text/html" title="MVC 확장 - Action Result" /><published>2015-12-05T00:00:00+00:00</published><updated>2015-12-05T00:00:00+00:00</updated><id>http://blog.jakeymvc.com/mvc-extension-1</id><content type="html" xml:base="http://blog.jakeymvc.com/mvc-extension-action-result">&lt;p&gt;MVC 애플리케이션을 다루다 보면 확장이 쉽다는 것을 알 수 있다. 단위 테스트를 염두에 두고 프레임워크 자체가 모듈화되었기 때문에 얻는 잇점이라고 할 수 있다. 좋은 구조로 설계하고 구현하는 것은 시간과 정성이 필요한 일이지만 여러 가지로 그 노력에 대한 보상이 돌아온다.&lt;/p&gt;

&lt;p&gt;앞으로 MVC의 확장 포인트를 정리할 계획이다. 그 첫번째로 Custom Action Result를 살펴보자.&lt;/p&gt;

&lt;h3 id=&quot;xmlresult&quot;&gt;XMLResult&lt;/h3&gt;

&lt;p&gt;목록 1은 리마인드 이메일을 보내기 위해 그 대상을 추출하는 액션이다. 이메일 서비스와 XML 포맷으로 통신하기 때문에 이메일 대상을 아예 XML로 받고자 한다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetApplicantsForReminders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicants&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Applicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmApplicants&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicantVM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vmApplicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicantVM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XMLResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmApplicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 1&amp;gt; 이메일 대상자를 XML 형식으로 반환하는 액션&lt;/p&gt;

&lt;p&gt;Entity Framework의 데이터베이스 컨텍스트를 통해 데이터를 가져오고 AutoMapper를 통해 뷰모델로 변환하는 것 외에는 특별한 것이 없다. 그 결과를 XML을 반환하고 있다는 것까지 코드로 알 수 있다.&lt;/p&gt;

&lt;p&gt;컨트롤러의 코드는 이렇게 단순해야 한다. 어떤 모델을 사용해야 할지 결정하고 해당 모델을 돌려 주면된다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ArrayOfApplicantVM&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ApplicantVM&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;FirstName&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FirstName&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;LastName&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LastName&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Dob&amp;gt;&lt;/span&gt;2015-11-02T00:00:00&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Dob&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Phone&amp;gt;&lt;/span&gt;54343&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Phone&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Email&amp;gt;&lt;/span&gt;asdfs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Email&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;MaritalStatus&amp;gt;&lt;/span&gt;Single&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MaritalStatus&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;HighestEducation&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/HighestEducation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;LicenseStatus&amp;gt;&lt;/span&gt;Valid&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LicenseStatus&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;YearsLicensed&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/YearsLicensed&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ApplicantVM&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ArrayOfApplicantVM&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;목록 2&amp;gt; 액션의 결과로 생성된 XML&lt;/p&gt;

&lt;p&gt;목록 2는 액션의 결과물이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationVM&lt;/code&gt;을 액션내에서 XML로 시리얼라이즈한다면 코드가 한참이나 늘어날 테고 재사용하지도 못할 것이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLResult&lt;/code&gt; 클래스가 어떻게 구현되었는지 목록 3에서 알아보자.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Web.Mvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Xml.Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XMLResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XMLResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ControllerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;XmlSerializer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XmlSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 3&amp;gt; XMLResult - Custom Action Result&lt;/p&gt;

&lt;p&gt;Custom Action Result를 구현하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionResult&lt;/code&gt; 클래스를 상속해야 하는데, 이 클래스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecuteResult&lt;/code&gt; 메서드를 abstract 로 정의하고 있어 자식 클래스에서 구현하도록 하고 있다. 데이터는 생성자를 통해 받았고 &lt;code class=&quot;highlighter-rouge&quot;&gt;ExcuteResult&lt;/code&gt; 메서드에서는 닷넷 &lt;code class=&quot;highlighter-rouge&quot;&gt;XmlSerializer&lt;/code&gt;를 사용해 HTTP Response를 작성했다. 군더더기가 없다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;커맨드 패턴&lt;/h3&gt;

&lt;p&gt;전체 과정을 보면 컨트롤러에서는 어떤 행동(반환값)이 필요한지 결정하여 그 행동을 구현한 객체에 실행을 위임하고 있다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XMLResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmApplicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionResult&lt;/code&gt; 클래스가 갖는 중요한 의미는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecuteResult&lt;/code&gt; 메서드를 강제화하여 프레임워크에서 호출될 수 있도록 할 뿐이다.&lt;/p&gt;

&lt;p&gt;이렇게 개별 행동을 하나의 명령 객체로 설계하면 명령을 결정하는 부분과 명령을 실행하는 부분을 분리할 수 있어 명령 추가가 쉽다. &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLResult&lt;/code&gt;를 추가하는 것이 이렇게 쉬운 이유는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionResult&lt;/code&gt;가 커맨드 패턴을 따른 덕이다.&lt;/p&gt;

&lt;h3 id=&quot;csvresult&quot;&gt;CSVResult&lt;/h3&gt;

&lt;p&gt;이번에는 데이터 교환용으로 많이 사용하고 엑셀에서 열어볼 수 있는 csv 포맷을 반환하는 Custom Action Result를 작성해 보자.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CSVResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileResult&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CSVResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FileDownloadName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponseBase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stringWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stringWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stringWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 4&amp;gt; FileResult를 상속하는 CSVResult&lt;/p&gt;

&lt;p&gt;이전과 달리 &lt;code class=&quot;highlighter-rouge&quot;&gt;CSVResult&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;FileResult&lt;/code&gt;를 상속하고 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;FileResult&lt;/code&gt;는 MVC 프레임워크가 기본적으로 지원하는 Action Result 중의 하나이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;FileResult&lt;/code&gt;의 구현과 그 구조에 대해서는 &lt;a href=&quot;/action-result-to-return-zip-file/&quot;&gt;Zip 파일 반환하는 ActionResult 만들기&lt;/a&gt; 라는 이전 포스팅을 참조하자.&lt;/p&gt;

&lt;p&gt;파일을 다루는 Action Result가 이미 있기 때문에 이 것을 상속함으로써 안정적으로 파일을 처리할 수 있게 되었고 새로운 포맷에만 집중하여 쉽게 Custom Action Result를 추가할 수 있다. 액션의 반환 형식이 파일이라면 FileResult를 활용하는 것을 항상 최우선적으로 생각해야 할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CSVResult&lt;/code&gt;를 구현하면서 몇 가지 특징적인 면을 아래에 정리했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생성자에서 content type을 부모 클래스 생성자에 전달하고 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;FileResult&lt;/code&gt;에는 parameterless 생성자가 없다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FileResult&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ExecuteResult&lt;/code&gt; 메서드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteFile&lt;/code&gt;을 호출하도록 구현되어 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteFile&lt;/code&gt;은 abstract로 정의되어 있어 자식 클래스에서 구현해야 하는데 실제로 파일의 내용을 생성해서 Response로 반환하는 역할을 한다.&lt;/li&gt;
  &lt;li&gt;데이터를 object로 받기 때문에 리플렉션 기법으로 속성 값을 추출한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CSVResult&lt;/code&gt;를 사용하는 예제는 목록 5에서 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetQuotesCSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicants&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Applicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedApplicants&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicantVM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mappedApplicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicantVM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CSVResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedApplicants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TestCSV&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 5&amp;gt; CSVResult를 사용하는 액션&lt;/p&gt;

&lt;h3 id=&quot;built-in-action-result&quot;&gt;Built-in Action Result&lt;/h3&gt;

&lt;p&gt;목록 6는 MVC 프레임워크에서 지원하는 Action Result와 이에 대응하는 헬퍼 메서드를 보여주고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ViewResult  -  View&lt;/li&gt;
  &lt;li&gt;PartialViewResult  -  PartialView&lt;/li&gt;
  &lt;li&gt;RedirectToRouteResult  -  RedirecToAction, RedirectToActionPermanent, RedirectToRoute, RedirectToRoutePermanent&lt;/li&gt;
  &lt;li&gt;RedirectResult - Redirect&lt;/li&gt;
  &lt;li&gt;ContentResult - RedirectPermanent, Content&lt;/li&gt;
  &lt;li&gt;FileResult - File&lt;/li&gt;
  &lt;li&gt;JsonResult - Json&lt;/li&gt;
  &lt;li&gt;JavaScriptResult - JavaScript&lt;/li&gt;
  &lt;li&gt;HttpUnauthorizedResult - None&lt;/li&gt;
  &lt;li&gt;HttpNotFoundResult - HttpNotFound&lt;/li&gt;
  &lt;li&gt;HttpStatusCodeResult - None&lt;/li&gt;
  &lt;li&gt;EmptyResult - None&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;목록 6&amp;gt; 내장된 ActionResult 형식&lt;/p&gt;

&lt;p&gt;여기서 헬퍼 메서드를 소개하는 이유는 실제로 컨트롤러 액션에서는 주로 이 것을 사용하기 때문이다. 헬퍼 메서드를 사용할 때 궁극적으로는 ActionResult의 인스턴스가 반환되는 것을 이해하면 목록 1과 목록 5에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;를 사용하는 것이 더 이상 부자연스럽지 않을 것이다.&lt;/p&gt;

&lt;p&gt;목록 7은 View와 관련된 헬퍼 메서드들인데 매개변수의 조합에 따른 여러 개의 오버라이드가 있고 모두 마지막 메서드에 의존하고 있는 걸 확인할 수 있다. 마지막 메서드는 예상대로 ViewResult의 인스턴스를 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masterName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* viewName */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* masterName */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masterName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masterName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masterName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* model */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* masterName */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masterName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViewName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MasterName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masterName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TempData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TempData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViewEngineCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewEngineCollection&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 7&amp;gt; Controller에서 구현하고 있는 View 메서드&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;MVC의 확장 포인트에 대한 첫 번째 주제로 Custom Action Result에 대해 알아봤다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체를 XML 형식으로 시리얼라이즈 하는 예제&lt;/li&gt;
  &lt;li&gt;객체를 CSV 형식의 파일로 다운로드 하는 예제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;를 코드와 함께 살펴봤다. 더불어, 명령을 객체화 한다는 커맨드 패턴도 알게 되었다.&lt;/p&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="mvc-extension" /><summary type="html">MVC 애플리케이션을 다루다 보면 확장이 쉽다는 것을 알 수 있다. 단위 테스트를 염두에 두고 프레임워크 자체가 모듈화되었기 때문에 얻는 잇점이라고 할 수 있다. 좋은 구조로 설계하고 구현하는 것은 시간과 정성이 필요한 일이지만 여러 가지로 그 노력에 대한 보상이 돌아온다.</summary></entry><entry><title type="html">ASP.NET 5가 좋은 다섯 가지 이유</title><link href="http://blog.jakeymvc.com/five-reasons-to-love-aspnet5" rel="alternate" type="text/html" title="ASP.NET 5가 좋은 다섯 가지 이유" /><published>2015-11-19T00:00:00+00:00</published><updated>2015-11-19T00:00:00+00:00</updated><id>http://blog.jakeymvc.com/five-reasons-to-love-aspnet5</id><content type="html" xml:base="http://blog.jakeymvc.com/five-reasons-to-love-aspnet5">&lt;p&gt;ASP.NET 5 RC1 이 예정대로 2015년 11월에 Connect() 행사 시점에 맞추어 배포되었다. RC 버전에 들어서면 사용자 피드백을 통한 안정화 단계에 접어든 것이므로 기능적인 추가와 변경이 없다고 한다. 베타버전이라 아직 망설였다면 이제 슬슬 시작해보는 것은 어떨까. ASP.NET 5가 좋은 이유를 다섯 가지로 정리해 봤다.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;1. 오픈소스&lt;/h1&gt;

&lt;p&gt;나는 오픈소스를 좋아한다. 누군가 아이디어를 구체화해서 다른 사람과 공유한다는 것이 좋고 집단 지성이 만들어낸 훌륭한 코드를 볼 수 있다는 것은 굉장한 매력이다.&lt;/p&gt;

&lt;p&gt;GitHub에는 ASP.NET과 관련된 &lt;a href=&quot;https://github.com/aspnet/&quot;&gt;ASP.NET 리포지토리&lt;/a&gt;와 닷넷 코어처럼 프레임워크와 관련된 &lt;a href=&quot;https://github.com/dotnet/&quot;&gt;.NET Fouddation 리포지토리&lt;/a&gt;가 공개되어 있다. 며칠 전 마이크로소프트의 Connect() 행사에서는 &lt;a href=&quot;https://github.com/Microsoft/vscode&quot;&gt;비주얼 스튜디오 코드의 리포지토리&lt;/a&gt;도 키노트중에 공개되었다.&lt;/p&gt;

&lt;p&gt;마이크로소프트의 기술로 개발하고 있다면 오프소스를 프로젝트에 함께 설치하여 프레임워크에서 동작하는 부분까지 디버깅할 수 있다. 또한, 확장 모듈과 사용자 정의 모듈을 만들때 프레임워크에 구현된 방식을 참고할 수도 있어 도움이 된다.&lt;/p&gt;

&lt;p&gt;마이크로소프트는 TypeScript를 공개했고 구글은 TypeScript를 기반으로 AngularJS 2를 작성하고 있으며 역시 공개하고 있다. 당신이 마이크로소프트나 구글에 취업하고 싶다면 이런 오픈소스 프로젝트에 이슈를 등록하고 Pull Request까지 도전해 보자. 당신의 열정과 실력을 증명할 수 있는 가장 좋은 방법일 것이다.&lt;/p&gt;

&lt;h1 id=&quot;iis---kestrel&quot;&gt;2. IIS에 목매지 않는다, Kestrel&lt;/h1&gt;

&lt;p&gt;IIS는 ASP.NET 웹 애플리케이션을 호스팅하는 성숙한(matured) 플랫폼이다. 반면, 규모가 작은 웹 애플리케이션의 경우에는 필요보다 과다한 기능을 제공하는 것이 문제되어 왔다. 그리고, ASP.NET과의 지나친 결속력은 성능면에서 이득일수도 있었으나 애플리케이션의 독립성을 저해하는 요소로 평가되어 왔다. 단적인 예로, &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms178685.aspx&quot;&gt;web.config 파일의 상속 구조&lt;/a&gt;만 봐도 이 둘의 관계가 얼마나 돈독한지 알 수 있다.&lt;/p&gt;

&lt;p&gt;웹 서버와 웹 애플리케이션이 서로 종속성을 갖는 것에 대해 무엇이 문제인지 답하기란 쉽지않다. 리눅스 서버를 갖고 있는데 ASP.NET과 C#을 하고 싶다면 이건 개인의 욕심인가, 기술의 장벽인가. 되야 맞는건가, 안되도 이해할 수 있는 문제인가. 주어진 상황에 따라 문제 삼으면 문제요, 아니면 아닌 것이다.&lt;/p&gt;

&lt;p&gt;그래도 호스팅 환경에 대한 종속성이 문제라고 생각했기 때문에 &lt;a href=&quot;http://owin.org/&quot;&gt;OWIN&lt;/a&gt;이란 표준이 나오지 않았나 싶다. OWIN은 닷넷 웹 애플리케이션과 웹 서버가 대화하는 방식을 표준화한 규격이고 이 규격대로 닷넷 애플리케이션을 호스팅할 수 있는 서버를 작성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://katanaproject.codeplex.com/documentation&quot;&gt;Katana 프로젝트&lt;/a&gt;는 OWIN 표준을 구현한 새로운 웹 애플리케이션 아키텍쳐다. &lt;a href=&quot;http://www.asp.net/aspnet/overview/owin-and-katana/an-overview-of-project-katana&quot;&gt;Katana의 탄생배경&lt;/a&gt;을 읽어 보면, 특히 그 아키텍쳐와 각 컴포넌트의 정의를 이해하는 것이 지금의 ASP.NET을 이해하는데 많은 도움이 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/katana-architecture.png&quot; alt=&quot;Katana Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 1&amp;gt; Katana 아키텍쳐&lt;/p&gt;

&lt;p&gt;일반적으로 말하는 웹 서버는 Host와 Server의 역할을 같이 한다. 그와 비교해서 셀프 호스팅을 예로 들면, 커맨드 프로그램을 호스트로, 소켓을 열고 HTTP 요청을 기다리는 리스너(listener)를 서버로 생각할 수 있다. 이제부터 서버라는 표현이 나오면 HTTP 요청을 잡아서 사용자가 지정한 OWIN 파이프라인으로 보내는 컴포넌트라고 생각하자.&lt;/p&gt;

&lt;p&gt;Katana가 있음에도 불구하고 마이크로소프트는 왜 &lt;a href=&quot;https://github.com/aspnet/Home/wiki/Servers&quot;&gt;Kestrel&lt;/a&gt;이라는 서버를 ASP.NET 5 프로젝트에 포함시켜야 했을까? 크로스플랫폼을 지원하기 위해서 코드 작성의 호환성과 함께 서버도 필요했기 때문이다. 닷넷 코드가 CoreCLR을 통해 서로 다른 운영체제에서 동일하게 해석된다 하더라도 ASP.NET 5는 웹 애플리케이션이니 만큼 호스트와 서버 없이는 동작할 수 없다. 따라서, Katana와 Kestrel이 구분되는 한 가지 요소는 크로스플랫폼이다.&lt;/p&gt;

&lt;p&gt;Kestrel(그리고, WebListener)를 사용하면 셀프 호스팅이 가능한데 이는 웹 애플리케이션에 날개를 달아주는 격이다. ASP.NET 5 애플리케이션은 라즈베이 파이에서도 운영할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;3. 모듈화&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;현재의 모놀리식 닷넷 프레임워크도 유지되지만 동시에 점차 NuGet 패키지로 모듈화되어 CoreFX 라이브러리를 구성해갈 것이다… 이렇게 애플리케이션에 필요한 기능만을 가져다 사용하는 pay-as-you-play 모델이라 가볍고 배포상의 이점이 있다…  - &lt;a href=&quot;/net-core/&quot;&gt;닷넷코어&lt;/a&gt; 중에서&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;덩치 큰 닷넷 프레임워크가 잘게 모듈화되고 있는 중이다(현재 진행형). 각각의 기능들이 NuGet에서 다운로드할 수 있는 개별 패키지로 분리되면서 버그 수정 및 업데이트 주기도 빨라진다. 이를 CoreFX 라이브러리라고 하는데 여러 런타임(.NET Nateive, CoreCLR)과 여러 애플리케이션 모델(Windows Store, ASP.NET 5)에서 공통으로 사용되므로 다른 종류의 애플리케이션을 작성하는 것이 완전히 새로운 일은 아닐 것이다.&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;4. 벤치마크는 계속 된다, 빠른 성능&lt;/h1&gt;

&lt;p&gt;ASP.NET 팀은 성능 개선에 큰 비중을 두어왔다. 다른 플랫폼과 지속적인 &lt;a href=&quot;https://github.com/aspnet/benchmarks#plain-text-with-http-pipelining&quot;&gt;벤치마크&lt;/a&gt;를 통해 NodeJS 보다 빠르게 만들겠다는 확고한 의지를 실천했다. 재밌는 점은 Kestrel과 NodeJS 모두 &lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt; 라는 비동기 I/O 기술을 지원하는 라이브러리에 기반하고 있다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aspnet/benchmarks#plain-text-with-http-pipelining&quot;&gt;&lt;img src=&quot;/images/post/benchmark.png&quot; alt=&quot;benchmark&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;그림 2&amp;gt; Plain text를 HTTP 파이프라인에서 벤치마크한 결과&lt;/p&gt;

&lt;p&gt;HTTP 파이프라인을 가볍게 가져갈 수 있었던 데는 미들웨어도 한 몫했다. 미들웨어는 복잡하고 어려웠던 OWIN을 좀더 쉽게 접근할 수 있도록 추상화하여 개발자가 요청 파이프라인를 통제할 수 있도록 해주고 파이프라인을 완전히 비워 버렸다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ASP.NET에서는 System.Web 을 사용하여 http 요청을 처리해 왔고 데이터 운반책인 HttpContext.Current는 32KB의 메모리를 차지했다. 이 것은 요청하는 웹 페이지의 복잡도에 상관없이 하나의 세션당 무조건 필요한 메모리 크기이므로 다소 불합리하다고 할 수 있었다. ASP.NET 5의 http 요청 처리는 Node.js 스타일의 raw socket 과 유사하게 변경되었고 단지 3KB의 메모리만을 차지한다. 이렇게 90% 감소된 메모리 사용은 로딩 타임을 줄여 사용자 요청에 빠르게 응대하고 동시에 더 많은 요청을 처리할 수 있게 해준다. 이런 성능 향상의 배경에 미들웨어가 있다.  - &lt;a href=&quot;/middleware/&quot;&gt;ASP.NET 5 미들웨어&lt;/a&gt; 중에서&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-3&quot;&gt;5. 클라우드 최적화&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/bye-web-config/&quot;&gt;새로운 Configuration 모델&lt;/a&gt;은 아주 유연하다. Json 타입의 설정파일과 환경 변수를 활용하는 것이 눈에 띄는 변화이다. 특히 민감한 정보를 하드코딩으로 사용하다가 GitHub 같은 곳에서 노출하지 않으려면 환경변수는 좋은 대안이다.&lt;/p&gt;

&lt;p&gt;호스팅 환경에 대한 독립성과 유연한 애플리케이션 설정 모델은 클라우드에서 애플리케이션을 운영하기 위한 준비라고 할 수 있다. 이와 더불어 ASP.NET 5 애플리케이션은 모듈화된 구조덕에 시장에서 검증된 제품 또는 기술들로 특정 기능(예: 캐싱)을 대치할 수 있다. 클라우드 스케일에 걸맞는 애플리케이션의 기능과 성능을 구현할 수 있는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;ASP.NET 5의 변화된 내용들을 보고 있자면 성숙하고도 당당해진 느낌을 받는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;마이크로소프트는 개발 프레임워크 뿐만 아니라 개발 도구들도 개방하고 있다&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://live.asp.net/&quot;&gt;live.asp.net&lt;/a&gt;을 통해 개발자들과 대화하고 피드백을 제품에 반영한다&lt;/li&gt;
  &lt;li&gt;다른 커뮤니티들이 잘하는 것을 인정하고 도입한다&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.asp.net/&quot;&gt;다큐멘테이션&lt;/a&gt;도 잘 정리되어 있고 개발자들의 컨트리뷰트도 받는다&lt;/li&gt;
  &lt;li&gt;맥북에서 마이크로소프트 기술을 사용해서 안드로이드르 앱을 개발할 수 있을 정도로 개발자들의 다양함을 인정한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ASP.NET 5는 모던 웹 애플리케이션을 개발하는데 첫 번째로 고려해 볼만한 기술이 될 것같다.&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;[참고자료]&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/b/tess/archive/2015/11/12/mastering-asp-net-5-without-growing-a-beard.aspx&quot;&gt;Mastering ASP.NET 5 without growing a beard&lt;/a&gt;&lt;/p&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="aspnet5" /><summary type="html">ASP.NET 5 RC1 이 예정대로 2015년 11월에 Connect() 행사 시점에 맞추어 배포되었다. RC 버전에 들어서면 사용자 피드백을 통한 안정화 단계에 접어든 것이므로 기능적인 추가와 변경이 없다고 한다. 베타버전이라 아직 망설였다면 이제 슬슬 시작해보는 것은 어떨까. ASP.NET 5가 좋은 이유를 다섯 가지로 정리해 봤다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.jakeymvc.com{&quot;feature&quot;=&gt;&quot;so-simple-sample-image-2.jpg&quot;}" /></entry><entry><title type="html">값 공급자 (Value Provider)</title><link href="http://blog.jakeymvc.com/value-provider/" rel="alternate" type="text/html" title="값 공급자 (Value Provider)" /><published>2015-10-02T00:00:00+01:00</published><updated>2015-10-02T00:00:00+01:00</updated><id>http://blog.jakeymvc.com/value-provider</id><content type="html" xml:base="http://blog.jakeymvc.com/value-provider/">&lt;p&gt;입력 값의 유효성을 검사하거나 또는 그 값을 조정하기 위해 이전 글, &lt;a href=&quot;/model-binding&quot;&gt;모델 바인딩 (Custom Model Binding)&lt;/a&gt;에서 모델 바인딩의 개념과 과정을 알아보고 사용자가 개입하는 방법을 알아봤다. 모델 바인더의 목표가 모델을 제공하는데 있지만 모델을 구성하는 값을 어디서 어떻게 가져오는지는 알지 못한다. HTTP 요청에서 값을 추출하는 일은 값 공급자의 몫이다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;모델 바인더와 값 공급자&lt;/h3&gt;

&lt;p&gt;모델 바인더(MB)와 값 공급자(VP)의 대화&lt;/p&gt;

&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0; margin-bottom:20px;}
.tg td{font-size: 0.8em;padding:5px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}
.tg .tg-yw4l{vertical-align:top}
.tg .bold{font-weight:bold;}
&lt;/style&gt;

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;요새 컨트롤러가 내 덕에 일이 많이 줄었어. 그렇게 생각하지 않니?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;그렇긴 하지, 우리가 만들어준 데이터를 쓰기만 하면 되잖아.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;우리? 왜 우리라고 생각하지? 값이든 객체든 컨트롤러 입맛에 맞게 만들어 주는건 난데.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;그렇게 생각해? 입력 값은 어디서나 오는지 알고 그러는거야?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;그야 물론, HTTP 요청에서 가져오는 거잖아.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;원칙적으로 말하면 그렇긴 하지. 그런데 HTTP 요청이 어떻게 구성되어 있나 생각해 보라구. A 라는 값이 폼 바디에 있는지, 쿼리스트링 또는 라우트 데이터에 있는지, 심지어 헤더 또는 쿠키에 박혀 있는 값인지 어떻게 알고 가져올 수 있을까?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;음... 그런 걸 내가 꼭 알 필요는 없잖아? 팩토리 아저씨에게 물어보면 그만인데.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;어라, 우리 아빠 이름이 팩토리인데.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;헉!!!&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;아빠는 우리 형제들한테 항상 퀴즈를 내, A라는 값을 누가 찾을 수 있냐고. 하지만, 기회가 불공평해. 나는 막내라서 답을 찾을 기회가 거의 없어.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;그게 무슨 뜻이야?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;먼저, 첫째 형이 폼 바디에 들어 있는 name-value 쌍을 보고 A라는 name을 찾지. 운좋게 찾으면 그걸로 끝이야, 아빠한테 A에 해당하는 값을 알려주고 끝나는 거지.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;만약 못 찾으면?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;그럼, 둘째 형 순서가 되지. 둘째 형은 라우트 데이터만 살펴봐. 거기 없으면 셋째 형 순서가 되지.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;재밌네. 셋째 형은 어디서 값을 찾을까?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;셋째 형은 쿼리스트링, 나는 파일, 이렇게 서열대로 찾는 곳이 각각 다르다구. 파일까지 오는 일이 거의 없어 아주 슬프다구.&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;그럼, 찾는 순서를 바꿀 수는 없는거야?&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;VP&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;아빠한테 물어봐. ㅋㅋ&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
    &lt;td class=&quot;tg-yw4l bold&quot;&gt;MB&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-yw4l&quot;&gt;내가 어떻게 해볼 수 있을 것 같기도 한데. 음...&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;액션 메서드에 매개변수가 정의되어 있으면 모델 바인더가 개입하여 HTTP 요청으로 전달된 값을 매개변수에 매핑한다. 이 과정을 자세히 들여다 보면 HTTP 요청에서 값을 찾는 일과 매개변수 형식의 객체를 만드는 두 가지 일로 구분할 수 있다.&lt;/p&gt;

&lt;p&gt;모델 바인더가 최전방에서 액션 메서드와 함께 동작하기 때문에 그 이면에서 값 공급자가 하는 중요한 일을 놓치기 쉽다. 값 공급자의 존재를 안다고 해도 때로는 사용자 로직을 모델 바인더에 넣어야 할지, 값 공급자로 구현해야 할지 막막할 때가 있다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;값 공급자는 언제 사용할까&lt;/h3&gt;

&lt;p&gt;모델 바인딩의 동작원리를 알아 보면서 모델 바인더와 값 공급자의 역할을 구분지었다. 값 공급자는 언제 사용하면 유용할까?&lt;/p&gt;

&lt;p&gt;값 공급자를 모델 바인더와 구분짓는 가장 큰 요소는 값의 출처를 캡슐화하고 있다는 것이다. 예를 들어, 사용자 정보를 액션 메서드에서 사용하고자 할 때, 그 것을 찾는 위치가 복잡해서 고민이 된다면 또는, 그 위치 때문에 단위 테스트에 지장이 있다면 매개변수로 지정하는 것을 고려해 보자.&lt;/p&gt;

&lt;p&gt;아래 목록 1의 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; 베이스 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 속성을 통해 사용자명에 접근하고 있다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 1&amp;gt; Welcome 액션 메서드&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WelcomeMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Welcome &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 속성을 찾아가 보면 목록 2에서처럼 HttpContext에서 정보를 받고 있다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 2&amp;gt; Controller 클래스의 User 속성&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Security&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPrincipal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;사용자의 상호 작용없이 Welcome 액션 메서드를 테스트하려면 어떻게 해야 할까? 테스트 메서드에서 컨트롤러를 생성하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Welcome&lt;/code&gt; 메서드를 호출하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 속성에서 당장 null reference 에러가 발생한다. HttpContext에서 사용자 정보를 가져올 수 없기 때문이다. 이를 방지하려면 테스트 메서드에서 HttpContext 객체를 mock 해야 하는데 성가신 일일뿐만 아니라 HttpContext와의 종속성을 피할 수 없다.&lt;/p&gt;

&lt;p&gt;값 공급자의 의미를 되새겨 HttpContext에서 사용자 정보를 가져오는 일을 캡슐화 해보자. 사용자 정보를 매개변수로 정의하는 것이다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 3&amp;gt; 사용자를 매개변수로 추가한 Welcome 액션 메서드&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPrincipal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterizedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterizedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WelcomeMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Welcome &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;목록 3에서 사용자(IPrincipal)를 매개변수로 받도록 Welcome 액션 메서드를 수정했다. 이제 모델 바인더가 &lt;code class=&quot;highlighter-rouge&quot;&gt;parameterizedUser&lt;/code&gt; 매개변수를 처리하는 값 공급자를 찾을 수 있도록 사용자 값 공급자와 팩토리를 만들어 보자.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 4&amp;gt; 사용자 정의 값 공급자&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IdentityValueProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IValueProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContainsPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;parameterizedUser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringComparison&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueProviderResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContainsPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ValueProviderResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Globalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CultureInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentCulture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;값 공급자를 만들려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;IValuePrivider&lt;/code&gt; 인터페이스를 구현해야 한다. 팩토리는 이 인터페이스를 구현하는 클래스들을 차례로 호출하면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ContainsPrefix&lt;/code&gt; 메서드를 호출하는데 prefix를 통해 액션 메서드에 정의한 매개변수명(여기서는  parameterizedUser)을 전달한다. 그 때문에 처리여부를 판단하기 위해 매개변수명을 하드코드로 비교하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IValuePrivider&lt;/code&gt; 인터페이스가 정의하는 또 하나의 메서드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GetValue&lt;/code&gt; 메서드이다. 이 메서드에서는 팩토리용으로 제공했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;ContainsPrefix&lt;/code&gt; 메서드를 통해 자신이 값 제공자인지 다시 한번 확인한 후,  HttpContext의 현재 사용자를 반환하고 있다. 반환 형식 &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueProviderResult&lt;/code&gt; 에 맞게 값을 구성하는데, 두 번째 인자인 AttemptedValue 는 시스템에 의해 오류시  overwrite 될 수 있기 때문에 null 로 할당해도 무방하다. 만약, &lt;code class=&quot;highlighter-rouge&quot;&gt;GetValue&lt;/code&gt; 메서드가  null을 반환하면 팩토리 내의 다음 값 공급자에게 기회가 돌아간다. 이런 체인 방식은 값을 다른 곳에도 중복 정의할 수 있는 유연함을 주지만 반면에, 팩토리가 호출되는 순서도 신경써야 할 것이다.&lt;/p&gt;

&lt;p&gt;팩토리를 정의하는 것은 아주 간단하다. 목록 5와 같이 값 공급자의 인스턴스를 반환하기만 하면 된다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 5&amp;gt; 사용자 정의 값 공급자를 위한 팩토리&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IdentityValueProviderFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueProviderFactory&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IValueProvider&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetValueProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ControllerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controllerContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IdentityValueProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;마지막으로 사용자 정의 팩토리를 MVC 프레임워크에 알려 줄 일만 남았다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 6&amp;gt; Global.asax 파일에 팩토리 등록&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MvcApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpApplication&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Application_Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AreaRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RegisterAllAreas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RouteConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RegisterRoutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouteTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ValueProviderFactories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Factories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IdentityValueProviderFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ValueProviderFactories.Factories&lt;/code&gt; 속성은 값 공급자 팩토리들의 컬렉션이다. 이 곳에 우리가 작성한 팩토리를 등록한다. 만약 팩토리가 사용되는 우선 순위를 높이고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;Insert&lt;/code&gt; 메서드를 사용해서 인덱스를 지정할 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;단위 테스트&lt;/h3&gt;

&lt;p&gt;값 공급자를 사용함으로써 HttpContext를 의존하고 취급해야 하는 부담을 덜었다. 이 것은 또한 테스트 면에서도 대단히 유용하다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 7&amp;gt; 단위 테스트&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[TestMethod]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestMethod1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Arrange
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HomeController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GenericPrincipal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenericPrincipal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenericIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iamtestuser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Act
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Assert
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WelcomeMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Welcome iamtestuser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;액션 메서드에 추가적인 매개변수를 정의하는 것이 깔끔해 보이지 않을 수도 있겠지만 테스트 과정에서 보상 받는 듯한 느낌이 든다.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;HTTP 요청을 탐색하고 필요한 정보를 가져오는데 값 공급자가 큰 역할을 하고 있다. 모델 바인더는 이를 토대로 해서 액션 메서드에 정의한 매개변수의 객체를 제공한다.&lt;/p&gt;

&lt;p&gt;모델 바인더와 값 공급자의 대화에서 값을 탐색하는 장소에 우선 순위가 있다고 했다. 이는 MVC 프레임워크가 제공하는 기본 모델 바인더에 국한된 이야기다. 이 순서를 조정하는 일은 팩토리가 FormValueProvider를 먼저 호출하느냐, QueryStringValueProvider를 먼저 호출하느냐의 문제이므로 팩토리 컬렉션을 어떻게 관리하느냐에 따라 값 공급자 간의 우선 순위를 조정할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;MVC 가 테스트를 염두에 두고 만들어진 프레임워크라는 것을 값 공급자를 통해 다시 한번 깨달았다. 테스트의 중요성을 알면서도 매번 간과하는 것은 MVC 개발자로서 창피한 일인 것 같다 (물론, 내 이야기다).&lt;/p&gt;

&lt;p&gt;간단하기는 하지만 매개변수명을 갖고 하드코드로 비교하는 것은 좋은 방법이 아닌 것 같다. 매개변수에 어트리뷰트를 적용해서 특정 값 공급자랑 연결되도록 하는 것이 나은 방법일 것 같다.&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;참고 자료&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://donovanbrown.com/post/2011/09/23/How-to-create-a-custom-Value-Provider-for-MVC&quot;&gt;How to create a custom Value Provider for MVC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://haacked.com/archive/2011/06/30/whatrsquos-the-difference-between-a-value-provider-and-model-binder.aspx/&quot;&gt;What’s the Difference Between a Value Provider and Model Binder?&lt;/a&gt;&lt;/p&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="mvc" /><summary type="html">모델 바인더의 목표가 모델을 제공하는데 있지만 모델을 구성하는 값을 어디서 어떻게 가져오는지는 알지 못한다. HTTP 요청에서 값을 추출하는 일은 값 공급자의 몫이다.</summary></entry><entry><title type="html">모델 바인딩 (Custom Model Binding)</title><link href="http://blog.jakeymvc.com/model-binding/" rel="alternate" type="text/html" title="모델 바인딩 (Custom Model Binding)" /><published>2015-09-25T16:15:00+01:00</published><updated>2015-09-25T16:15:00+01:00</updated><id>http://blog.jakeymvc.com/model-binder</id><content type="html" xml:base="http://blog.jakeymvc.com/model-binding/">&lt;p&gt;모델 바인딩이란 브라우저가 HTTP 요청에 담아서 전달한 데이터를 이용해 .NET 객체를 생성하는 과정을 말한다. MVC 프레임워크는 요청 값을 분석하여 액션 메서드에 필요한 매개변수 형식을 생성하고 값을 할당한다. int, string과 같은 기본 형식(primitive type)부터 중첩된 클래스까지 처리할 수 있는데, 이렇게 여러 상황을 처리하기 위해서 때로는 작동원리를 이해하고 있는 사용자의 개입이 필요할 때도 있다. 이번 글에서는 모델 바인딩 과정에 참여해서 사용자가 원하는 작업을 어떻게 처리하는지 알아 보고자 한다.&lt;/p&gt;

&lt;p&gt;프로젝트의 막바지 작업으로 리포트를 만들고 있었다. 거의 모든 리포트에서 공통으로 받는 조건 중 하나가 from-to의 날짜 범위였는데 이 날짜가 데이터베이스에는 datetime으로 정의되어 있어 to 조건에서 문제가 생겼다. 예를 들어, 2015년 9월을 대상으로 데이터를 조회한다고 할 때, EF에 사용한 조회 조건이 다음과 같이 조금 부족한 SQL 쿼리로 변환되는 것이 문제였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ...
FROM ...
WHERE [ActionDate] &amp;gt;= '2015-09-01 00:00:00:000' 
    AND [ActionDate] &amp;lt;= '2015-09-30 00:00:00:000'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 쿼리는 의도와는 다르게 9월 30일의 데이터를 조회하지 못한다. 시간 때문이다.&lt;/p&gt;

&lt;p&gt;목록 1은 프로그램에서 사용하고 있는 조회문이다. 애초에 toDate를 처리할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;2015-09-30 23:59:59:000&lt;/code&gt; 처럼 시간 값을 붙여주면 좋겠다는 생각이 들었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Edit:  컴퓨팅에서 1초라는 시간은 길다고도 할 수 있다. 처음에는 밀리 세컨드를 염두에 두지 않았는데 독자의 피드백을 반영하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;2015-09-30 23:59:59:997&lt;/code&gt; 로 변경했다. 밀리 세컨드를 999로 설정하면 MS SQL 서버는 &lt;code class=&quot;highlighter-rouge&quot;&gt;2015-10-01 00:00:00:000&lt;/code&gt;으로 해석한다. 천분의 일(1/1000)로 처리하지 못하고 삼백분의 일(1/300)로 계산하기 때문에 올림처리가 되는 현상이 있기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;물론, 받은 날짜에 하루를 더한 후 less than &lt;code class=&quot;highlighter-rouge&quot;&gt;2015-10-01 00:00:00:000&lt;/code&gt; 처리를 해도 되지만 이 것 때문에 날짜를 더하는 로직과, greater than or equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt; 와 less than &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 을 혼용하는 것을 개인적으로 선호하지 않는다. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt; 를 사용하여 일관되게 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;를 사용함으로써 날짜를 between 이라는 개념에 맞추어 두는 것을 선호한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;lt;목록 1&amp;gt; Entity Framework 쿼리&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IQueryable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatteryVoltageTransactionReportData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetBatteryVoltageReading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatteryVoltageReadings&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResultType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;S&quot;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromDate&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toDate&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatteryVoltageTransactionReportData&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ActionDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Vin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Voltage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Voltage&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다음과 같은 과정으로 문제를 해결해 보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;from, to 날짜를 포함하는 DateRange 클래스 정의&lt;/li&gt;
  &lt;li&gt;DateRange 클래스의 모델 바인딩을 처리할 사용자 모델 바인더 정의&lt;/li&gt;
  &lt;li&gt;MVC 프레임워크에 DateRange 클래스 전용 모델 바인더를 알림&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;첫 번째로 DateRange 클래스를 목록 2와 같이 정의한다. DateTime과 같은 기본 형식은 MVC 프레임워크가 &lt;code class=&quot;highlighter-rouge&quot;&gt;DefaultModelBinder&lt;/code&gt; 라는 모델 바인더를 사용하여 처리한다. 이 시나리오에서는, FromDate는 원래 값을 유지하면서 ToDate의 시간 값을 조정할 것이므로 DateTime 이라는 primitive type 자체를 대상으로 할 수 없다. 만약, 그렇게 한다면 to 성격의 값을 구별해내야 하는 어려움이 따른다. 속성명을 사용해서 구분해야 하는데 이 방법에 대해서는 다음 포스팅에서 알아보기로 한다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 2&amp;gt; DateRange 클래스&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateRange&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FromDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ToDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;사용자 클래스를 정의했으니 이를 처리할 모델 바인더를 만들 차례다. 목록 3은 &lt;code class=&quot;highlighter-rouge&quot;&gt;IModelBinder&lt;/code&gt; 인터페이스를 상속하여 사용자 정의 모델 바인더를 구현하고 있다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 3&amp;gt; 사용자 정의 모델 바인더&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateRangeBinder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IModelBinder&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BindModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ControllerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controllerContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelBindingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DateRange&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DateRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;FromDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ToDate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;997&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBindingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValueProviderResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AttemptedValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AttemptedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IModelBinder&lt;/code&gt; 인터페이스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;BindModel&lt;/code&gt;이라는 하나의 메서드를 정의하고 있고, 컨트롤러 컨텍스트와 모델 바인딩 컨텍스트를 받는다. 모델 바인딩 컨텍스트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; 속성에 &lt;code class=&quot;highlighter-rouge&quot;&gt;DateRange&lt;/code&gt; 클래스의 인스턴스가 있으면 사용하고 그렇지 않으면 새 인스턴스를 준비한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetValue&lt;/code&gt; 메서드는 MVC 프레임워크의 기본 값 제공자(Value Provider)를 사용해서 입력된 값을 읽는다. 그 결과는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueProviderResult&lt;/code&gt; 형식이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;AttemptedValue&lt;/code&gt; 라는 문자열 속성을 사용하여 날짜 형식으로 변환한다 (RawValue 라는 object 형식의 속성을 사용하여 형 변환해도 된다). 만약, 값이 없다면 기본 값으로 현재 날짜를 돌려주고 있다.&lt;/p&gt;

&lt;p&gt;이제 마지막으로 MVC 프레임워크에 &lt;code class=&quot;highlighter-rouge&quot;&gt;DateRange&lt;/code&gt; 클래스의 모델 바인더가 있다고 알려주는 두 가지 방법을 목록 4와 목록 5에서 보여주고 있다.&lt;/p&gt;

&lt;p&gt;&amp;lt;목록 4&amp;gt; Global.asax 파일 Application_Start() 메서드에 선언&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ModelBinders.Binders.Add(typeof(DateRange), new DateRangeBinder());
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;목록 5&amp;gt; 사용자 모델 바인더 사용&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;na&quot;&gt;[ModelBinder(typeof(DateRangeBinder))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateRange&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;목록 4는 Global.asax 파일의 Application_Start() 메서드에 추가하는 내용으로 모델 바인더의 컬렉션에 새로 정의한 모델 바인더를 등록하고 있다.&lt;/p&gt;

&lt;p&gt;목록 5는 모델의 어트리뷰트로서 모델 바인더를 지정하고 있는 모습이다. 개인적으로는 후자의 경우가 가독성이 더 좋은 듯 하다. 모델과 그 바인더를 한 곳에서 보는 것이 모델 바인딩 처리를 별도로 한다는 명시적인 표현이기 때문이다. 참고로, ASP.NET 5에서는 Global.asax 파일이 없어지고 Startup 클래스에서 시작 처리를 해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;MVC 프레임워크는 테스트를 염두에 두고 만들어진 프레임워크이기 때문에 기능을 구현함에 있어 인터페이스를 반드시 정의하고 이 인터페이스를 구현하는 기본 클래스를 제공한다. 따라서, 기본 클래스를 상속해서 기능을 확장하는 것이 쉽고, 이번 글의 예제처럼 해당 인터페이스를 구현하는 사용자 클래스를 작성하여 사용자의 상황에 맞는 기능을 주입하는 것이 어렵지 않다.&lt;/p&gt;</content><author><name>Jake Ryu</name><email>jakeymvc@gmail.com</email></author><category term="mvc" /><summary type="html">모델 바인딩이란 브라우저가 HTTP 요청에 담아서 전달한 데이터를 이용해 .NET 객체를 생성하는 과정을 말한다. MVC 프레임워크는 요청 값을 분석하여 액션 메서드에 필요한 매개변수 형식을 생성하고 값을 할당한다.</summary></entry></feed>
